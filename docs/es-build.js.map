{
  "version": 3,
  "sources": ["../Cubism/src/Utils/Math/Point.ts", "../Cubism/src/Utils/Math/TransformMatrix2D.ts", "../Cubism/src/Drawer/CubismCanvasState.ts", "../Cubism/src/CubismPart.ts", "../Cubism/src/Constants/EventKeys.ts", "../Cubism/src/Drawer/CubismCanvasDrawer.ts", "../Cubism/src/Events/CubismEventSystem.ts", "../Cubism/src/Datatypes/PointerPoint.ts", "../Cubism/src/Global/Outer/CubismOuterGlobal.ts", "../Cubism/src/CubismElementManger.ts", "../Cubism/src/CubismEventManager.ts", "../Cubism/src/Cubism.ts", "../Cubism/src/Utils/Debug/DebugConsole.ts", "../Cubism/src/Constants/SizeKeys.ts", "../Cubism/src/Utils/Decorators/NeedsRedraw.ts", "../Cubism/src/Elements/Basic/CubismElement.ts", "../Cubism/src/Elements/Basic/CubismParentElement.ts", "../Cubism/src/Elements/Basic/PointerHanderParentElement.ts", "../Cubism/src/Constants/Colors.ts", "../Cubism/src/Utils/Physics/Physics2D/PhysicalPoint2D.ts", "../Cubism/src/Elements/Fancy/RecursiveRect.ts", "../Cubism/src/Elements/Fancy/ChangingRainbowBackground.ts", "../Cubism/src/Demo/CanvasRecorder.ts", "../Cubism/src/Demo/StaticDemo.ts", "../Cubism/src/Demo/DemoDecorators.ts", "../Cubism/src/Elements/Layouts/LayoutElement.ts", "../Cubism/src/Elements/Layouts/VerticalLayout.ts", "../Cubism/src/Theme/BasicTheme.ts", "../Cubism/src/Constants/ThemeKeys.ts", "../Cubism/src/Elements/Basic/ThemedElement.ts", "../Cubism/src/Elements/Basic/PointerInteractThemeElement.ts", "../Cubism/src/Elements/RectElement.ts", "../Cubism/src/Elements/CircleElement.ts", "../Cubism/src/Elements/Layouts/HorizontalLayout.ts", "../Cubism/src/Elements/Background.ts", "../Cubism/src/Theme/FontTheme.ts", "../Cubism/src/Elements/TextElement.ts", "../Cubism/src/Elements/ButtonElement.ts", "../Cubism/src/Elements/Icons/BasicIcon.ts", "../Cubism/src/Elements/Icons/CloseIcon.ts", "../Cubism/src/Elements/Icons/AddIcon.ts", "../Cubism/src/Elements/Icons/MaterialIcons.ts", "../Cubism/src/Elements/DraggableCircle.ts", "../Cubism/src/Utils/Math/NNMatrix.ts", "../Cubism/src/Curve/Curve2D/Cubic.ts", "../Cubism/src/Elements/CurveElement.ts", "../Cubism/src/Animation/Animation.ts", "../Cubism/src/Elements/Fancy/CurveCanvas.ts", "../Cubism/src/Demo/DemoFunctions.ts"],
  "sourcesContent": ["/**\n * A representation of a point in 2D space.\n */\nexport class Point2D implements IPoint2D {\n    arr: number[]\n\n    constructor(x: number, y: number) {\n        this.arr = [x, y];\n    }\n\n    static get zero() {\n        return new Point2D(0, 0);\n    }\n\n    static fromIPoint(i: IPoint2D) {\n        return new Point2D(i.x, i.y);\n    }\n\n    static fromArray(arr: number[]): Point2D {\n        return new Point2D(arr[0], arr[1]);\n    }\n\n    static fromNumber(n: number): Point2D {\n        return new Point2D(n, n);\n    }\n\n    static getRandom(min: number | null = null, max: number | null = null) {\n\n        if (max === null) {\n            if (min !== null) {\n                max = min;\n                min = 0;\n            } else {\n                max = 1;\n                min = 0;\n            }\n        }\n\n        min = min || 0;\n\n        return new Point2D(Math.random() * (max - min) + min, Math.random() * (max - min) + min);\n    }\n\n    get x() {\n        return this.arr[0];\n    }\n\n    set x(value: number) {\n        this.arr[0] = value;\n    }\n\n    get y() {\n        return this.arr[1];\n    }\n\n    set y(value: number) {\n        this.arr[1] = value;\n    }\n\n    clone(): Point2D {\n        return new Point2D(this.x, this.y);\n    }\n\n    setXY(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n    get max() {\n        return Math.max(this.x, this.y);\n    }\n\n    get min() {\n        return Math.min(this.x, this.y);\n    }\n\n    set(point: Point2D) {\n        this.x = point.x;\n        this.y = point.y;\n        return this;\n    }\n\n\n    /**\n     * Offset the point by the given amount.\n     * @param offset\n     */\n    offset(offset: Point2D) {\n        this.x += offset.x;\n        this.y += offset.y;\n        return this;\n    }\n\n    identity(): Point2D {\n\n        let rotation = Math.atan2(this.y, this.x);\n        // let length = this.euclideanDistance(Point2D.zero);\n\n        return new Point2D(Math.cos(rotation) , Math.sin(rotation) );\n    }\n\n    /**\n     * Offset the point by the negative given amount.\n     * @param offset\n     */\n    nOffset(offset: Point2D) {\n        this.x -= offset.x;\n        this.y -= offset.y;\n        return this;\n    }\n\n    add(other: Point2D): Point2D {\n        return this.clone().offset(other);\n    }\n\n    sub(other: Point2D): Point2D {\n        return this.clone().nOffset(other);\n    }\n\n    subXY(x: number, y: number): Point2D {\n        return this.sub(new Point2D(x, y));\n    }\n\n    mul(other: Point2D): Point2D {\n        return new Point2D(this.x * other.x, this.y * other.y);\n    }\n\n    scale(n: number): Point2D {\n        return new Point2D(this.x * n, this.y * n);\n    }\n\n    toString() {\n        return `[${this.x}, ${this.y}]`;\n    }\n\n    euclideanDistance(other: Point2D): number {\n        return Math.sqrt(Math.pow(this.x - other.x, 2) + Math.pow(this.y - other.y, 2));\n    }\n\n    manhattanDistance(other: Point2D): number {\n        return Math.abs(this.x - other.x) + Math.abs(this.y - other.y);\n    }\n\n    angleTo(other: Point2D): number {\n        return Math.atan2(other.y - this.y, other.x - this.x);\n    }\n}\n", "/**\n * A class representing a 2D transformation matrix.\n */\nimport {Point2D} from \"./Point\";\n\nexport class TransformMatrix2D {\n    arr: number[][] = [];\n\n    /**\n     * Creates a new 2D transform matrix.\n     * @param m11 Horizontal scaling. A value of 1 results in no scaling.\n     * @param m12 Vertical skewing.\n     * @param m21 Horizontal skewing.\n     * @param m22 Vertical scaling. A value of 1 results in no scaling.\n     * @param dx  Horizontal translation (moving).\n     * @param dy Vertical translation (moving).\n     */\n    constructor(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number) {\n        this.arr = [\n            [m11, m12, dx],\n            [m21, m22, dy],\n            [0, 0, 1]\n        ];\n    }\n    get m11(): number {\n        return this.arr[0][0];\n    }\n\n    set m11(value: number) {\n        this.arr[0][0] = value;\n    }\n\n    get m12(): number {\n        return this.arr[0][1];\n    }\n\n    set m12(value: number) {\n        this.arr[0][1] = value;\n    }\n\n    get m21(): number {\n        return this.arr[1][0];\n    }\n\n    set m21(value: number) {\n        this.arr[1][0] = value;\n    }\n\n    get m22(): number {\n        return this.arr[1][1];\n    }\n\n    set m22(value: number) {\n        this.arr[1][1] = value;\n    }\n\n    get dx(): number {\n        return this.arr[0][2];\n    }\n\n    set dx(value: number) {\n        this.arr[0][2] = value;\n    }\n\n    get dy(): number {\n        return this.arr[1][2];\n    }\n\n    set dy(value: number) {\n        this.arr[1][2] = value;\n    }\n\n\n    static makeFromArray(arr: number[][]): TransformMatrix2D {\n        return new TransformMatrix2D(arr[0][0], arr[0][1], arr[1][0], arr[1][1], arr[0][2], arr[1][2]);\n    }\n\n    get(x: number, y: number): number {\n        return this.arr[x][y];\n    }\n\n    set(x: number, y: number, value: number) {\n        // console.log(`Setting ${x}, ${y} to ${value}`);\n        this.arr[x][y] = value;\n    }\n\n    static identity(): TransformMatrix2D {\n        return new TransformMatrix2D(1, 0, 0, 1, 0, 0);\n    }\n\n    static zero(): TransformMatrix2D {\n        return new TransformMatrix2D(0, 0, 0, 0, 0, 0);\n    }\n\n    static translation(x: number, y: number): TransformMatrix2D {\n        return new TransformMatrix2D(1, 0, 0, 1, x, y);\n    }\n\n    static translationFromPoint(point: Point2D): TransformMatrix2D {\n        return TransformMatrix2D.translation(point.x, point.y);\n    }\n\n    static rotation(angle: number): TransformMatrix2D {\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n        return new TransformMatrix2D(cos, -sin, sin, cos, 0, 0);\n    }\n\n    static scale(x: number, y: number): TransformMatrix2D {\n        return new TransformMatrix2D(x, 0, 0, y, 0, 0);\n    }\n    static scaleFromPoint(point: Point2D): TransformMatrix2D {\n        return TransformMatrix2D.scale(point.x, point.y);\n    }\n\n    clone(): TransformMatrix2D {\n        return new TransformMatrix2D(this.m11, this.m12, this.m21, this.m22, this.dx, this.dy);\n    }\n\n    multiply(other: TransformMatrix2D): TransformMatrix2D {\n        let newMatrix = TransformMatrix2D.zero();\n        for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < 3; j++) {\n                let dotProduct = 0;\n                for (let k = 0; k < 3; k++) {\n                    dotProduct += this.get(i, k) * other.get(k, j);\n                }\n                newMatrix.set(i, j, dotProduct);\n            }\n        }\n        return newMatrix;\n    }\n\n    offsetXY(x: number, y: number): TransformMatrix2D {\n        return this.multiply(TransformMatrix2D.translation(x, y));\n    }\n    offsetPoint(point: Point2D): TransformMatrix2D {\n        return this.offsetXY(point.x, point.y);\n    }\n\n    rotate(angle: number): TransformMatrix2D {\n        return this.multiply(TransformMatrix2D.rotation(angle));\n    }\n\n    scale(x: number, y: number): TransformMatrix2D {\n        return this.multiply(TransformMatrix2D.scale(x, y));\n    }\n\n    toString(): string {\n        return `(${this.m11}, ${this.m12}, ${this.dx})\\n(${this.m21}, ${this.m22}, ${this.dy})`;\n    }\n}\n", "import {Point2D} from \"../Utils/Math/Point\";\nimport {TransformMatrix2D} from \"../Utils/Math/TransformMatrix2D\";\n\n/**\n * The state of the canvas\n */\nexport class CubismCanvasState {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n\n    constructor(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n    }\n\n    private _translates: TransformMatrix2D[] = [TransformMatrix2D.identity()];\n    get translates() {\n        return this._translates;\n    }\n\n    private _saves: TransformMatrix2D[] = [];\n\n\n    translate(translateMatrix: TransformMatrix2D) {\n        this.translates.push(translateMatrix);\n        this.setCtxTransform(translateMatrix);\n    }\n\n    offset(offset: Point2D) {\n        let translateMatrix = this.translateMatrix.clone().offsetPoint(offset);\n        this.translate(translateMatrix);\n    }\n\n    rotate(angle: number) {\n        let translateMatrix = this.translateMatrix.clone().rotate(angle);\n        this.translate(translateMatrix);\n    }\n\n    scale(scale: Point2D) {\n        let translateMatrix = this.translateMatrix.clone().scale(scale.x, scale.y);\n        this.translate(translateMatrix);\n    }\n\n    save() {\n        this._saves.push(this.translateMatrix.clone());\n\n    }\n\n    restoreSave() {\n        let lastSave = this._saves.pop();\n        if (lastSave) {\n            this.setCtxTransform(lastSave);\n        }\n    }\n\n\n    setCtxTransform(t: TransformMatrix2D) {\n        this.ctx.setTransform(t.m11, t.m12, t.m21, t.m22, t.dx, t.dy);\n    }\n\n    restoreTranslate() {\n        // console.log(`Restoring translate ${this.translates.length}`);\n        let lastTranslate = this.popTranslate();\n        this.setCtxTransform(lastTranslate);\n    }\n\n    get translateMatrix(): TransformMatrix2D {\n        return this.translates[this.translates.length - 1];\n    }\n\n    popTranslate(): TransformMatrix2D {\n        if (this.translates.length > 1) {\n            // console.log(\"pop translate\");\n            return this.translates.pop() as TransformMatrix2D;\n        }\n        return this.translates[0];\n    }\n\n    _needsRedraw: boolean = true;\n    get needsRedraw() {\n        return this._needsRedraw;\n    }\n\n    set needsRedraw(value: boolean) {\n        this._needsRedraw = value;\n    }\n}\n", "import IHasCubism from \"./Interface/IGlobalHandler\";\nimport {Cubism} from \"./Cubism\";\n\nexport default class CubismPart implements IHasCubism {\n    _cubism: Cubism | null = null;\n    get cubism(): Cubism {\n        return this.getCubism();\n    }\n    /**\n     * It seems like setter has some problems with overriding\n     * @param cubism\n     */\n    set cubism(cubism: Cubism) {\n        this.setCubism(cubism);\n    }\n\n    /**\n     * Called by setter\n     * @param cubism\n     */\n    setCubism(cubism: Cubism) {\n        this._cubism = cubism;\n    }\n\n    /**\n     * Called by getter\n     */\n    getCubism(): Cubism {\n        if (this._cubism === null) {\n            throw new Error(`Cubism is not set for ${this.className}`);\n        }\n        return this._cubism as Cubism;\n    }\n\n    get className(): string {\n        return this.constructor.name;\n    }\n\n    toString(): string {\n        return `${this.className}(${(this._cubism ===null) ? this._cubism : \"NO CUBISM\"})`;\n    }\n}", "\nexport class EventKeys {\n    public static readonly ON_MOVE = \"onMove\";\n    public static readonly ON_DOWN = \"onDown\";\n    public static readonly ON_UP = \"onUp\";\n\n    public static readonly GLOBAL_ON_POINTER_CHANGE = \"redraw\";\n\n    public static readonly FPS_UPDATE = \"FPS_EVENT\";\n\n    public static readonly ON_POINTER_EVENT = \"onPointerEvent\";\n\n    public static readonly ON_CLICK = \"onClick\";\n    public static readonly ON_DOUBLE_CLICK = \"onDoubleClick\";\n    public static readonly ON_DRAG = \"onDrag\";\n    public static readonly ON_DRAG_START = \"onDragStart\";\n    public static readonly ON_DRAG_END = \"onDragEnd\";\n    public static readonly ON_DRAG_ENTER = \"onDragEnter\";\n    public static readonly ON_DRAG_LEAVE = \"onDragLeave\";\n    public static readonly ON_DRAG_OVER = \"onDragOver\";\n    public static readonly ON_DROP = \"onDrop\";\n    public static readonly ON_PARENT_MOVE = \"onParentMove\";\n    public static readonly ON_PARENT_DOWN = \"onParentDown\";\n    public static readonly ON_PARENT_UP = \"onParentUp\";\n    public static readonly ON_PARENT_CLICK = \"onParentClick\";\n    public static readonly ON_ENTER = \"onEnter\";\n    public static readonly ON_LEAVE = \"onLeave\";\n\n    public static readonly FRAME_UPDATE = \"onFrameUpdate\";\n    public static readonly FIX_UPDATE = \"onFixUpdate\";\n    public static readonly REDRAW = \"onRedraw\";\n\n    public static readonly POINTER_DOWN = \"onMouseDown\";\n    public static readonly POINTER_UP = \"onMouseUp\";\n    public static readonly POINTER_MOVE = \"onMouseMove\";\n\n    public static readonly SECOND_UPDATE = \"onSecondUpdate\";\n    public static readonly MINUTE_UPDATE = \"onMinuteUpdate\";\n    public static readonly HOUR_UPDATE = \"onHourUpdate\";\n\n    public static readonly DRAW_COUNT_UPDATE = \"onDrawCountUpdate\";\n}\n", "import {Point2D} from \"../Utils/Math/Point\";\nimport {CubismCanvasState} from \"./CubismCanvasState\";\nimport CubismPart from \"../CubismPart\";\nimport {Cubism} from \"../Cubism\";\nimport {EventKeys} from \"../Constants/EventKeys\";\n\n/**\n * Adaptor class for the canvas\n * with the ability to draw on it\n * and handle events\n */\nexport class CubismCanvasDrawer extends CubismPart {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n\n    get eventSystem() {\n        return this.cubism.eventSystem;\n    }\n\n    state: CubismCanvasState; // the state of the canvas\n\n    /**\n     * Constructor of the CanvasDrawer\n     * @param canvas the canvas to draw on\n     */\n    constructor(canvas: HTMLCanvasElement) {\n        super();\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n        this.state = new CubismCanvasState(canvas, this.ctx);\n    }\n\n    setCubism(cubism: Cubism) {\n        super.setCubism(cubism);\n\n        this.registerFrameUpdate();\n    }\n\n    get width() {\n        return this.canvas.width;\n    }\n\n    set width(width: number) {\n        this.canvas.width = width;\n    }\n\n    get height() {\n        return this.canvas.height;\n    }\n\n    set height(height: number) {\n        this.canvas.height = height;\n    }\n\n    /**\n     * Register the frame update event\n     * @private\n     */\n    private registerFrameUpdate() {\n        // console.log(\"Registering frame update\");\n        this.eventSystem.registerEvent(EventKeys.FRAME_UPDATE, this.frameUpdate.bind(this));\n    }\n\n    /**\n     * Things to do on every frame update\n     * @private\n     */\n    private frameUpdate() {\n        // console.log(\"Frame update\");\n        if (this.state.needsRedraw) {\n            this.triggerRedraw();\n            // console.log(\"Redrawing\");\n            this.state.needsRedraw = false;\n        }\n    }\n\n    /**\n     * Clear the canvas\n     */\n    clear() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.canvas.width = this.cubism.width;\n    }\n\n    /**\n     * Set the fill style(color) of the canvas\n     * @param style the style to set\n     */\n    setFillStyle(style: string) {\n        this.ctx.fillStyle = style;\n    }\n\n    /**\n     * Set the stroke style(color) of the canvas\n     * @param style the style to set\n     */\n    setStrokeStyle(style: string) {\n        this.ctx.strokeStyle = style;\n    }\n\n    /**\n     * Set the line width of the canvas\n     * @param width\n     */\n    setStrokeWidth(width: number) {\n        this.ctx.lineWidth = width;\n    }\n\n    /**\n     * Translate the canvas\n     * @param offset\n     */\n    offset(offset: Point2D) {\n        this.state.offset(offset);\n    }\n\n    offsetXY(x: number, y: number) {\n        this.state.offset(new Point2D(x, y));\n    }\n\n    rotate(angle: number) {\n        this.state.rotate(angle);\n    }\n\n    scale(scale: Point2D | number) {\n        if (typeof scale === \"number\") {\n            scale = Point2D.fromNumber(scale);\n        }\n        this.state.scale(scale);\n    }\n\n\n    /**\n     * Restore translation and rotation to previous state\n     */\n    restoreTranslate() {\n        this.state.restoreTranslate();\n    }\n\n    /**\n     * Draw text on the canvas\n     * @param text the text to draw\n     * @param x the x position of the text\n     * @param y the y position of the text\n     */\n    fillText(text: string, x: number, y: number) {\n        this.ctx.fillText(text, x, y);\n    }\n\n    /**\n     * Draw a line with two Point2Ds\n     * @param begin the beginning of the line\n     * @param end the end of the line\n     */\n    drawLineWithPoints(begin: IPoint2D, end: IPoint2D) {\n        this.drawLine(begin.x, begin.y, end.x, end.y);\n    }\n\n    /**\n     * Draw a line with four numbers\n     * @param beginX the x position of the beginning of the line\n     * @param beginY the y position of the beginning of the line\n     * @param endX the x position of the end of the line\n     * @param endY the y position of the end of the line\n     */\n    drawLine(beginX: number, beginY: number, endX: number, endY: number) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(beginX, beginY);\n        this.ctx.lineTo(endX, endY);\n        this.closeDraw();\n    }\n\n    drawCircle(x: number, y: number, radius: number) {\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\n        this.closeDraw();\n    }\n\n    drawPoint(point: IPoint2D, radius: number = 5) {\n        this.drawCircle(point.x, point.y, radius);\n    }\n\n\n    drawShape(points: IPoint2D[]) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(points[0].x, points[0].y);\n        for (let i = 1; i < points.length; i++) {\n            this.ctx.lineTo(points[i].x, points[i].y);\n        }\n        this.closeDraw();\n    }\n\n    drawRectWithPoints(p1: IPoint2D, p2: IPoint2D | null = null) {\n        if (p2 === null) {\n            this.drawRect(0, 0, p1.x, p1.y);\n        } else {\n            this.drawRect(p1.x, p1.y, p2.x, p2.y);\n        }\n    }\n\n    drawRect(x: number, y: number, width: number, height: number) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(x, y);\n        this.ctx.lineTo(width, y);\n        this.ctx.lineTo(width, height);\n        this.ctx.lineTo(x, height);\n        this.closeDraw();\n    }\n\n    drawPathString(path: string) {\n        this.drawPath(new Path2D(path));\n    }\n\n    /**\n     * Draw an HTML Canvas Path on the canvas\n     * @param path\n     */\n    drawPath(path: Path2D) {\n        this.ctx.stroke(path);\n    }\n\n    /**\n     * Close the drawing path\n     */\n    closeDraw() {\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n\n    /**\n     * Set the font of the canvas\n     * @param font\n     */\n    setFont(font: string) {\n        this.ctx.font = font;\n    }\n\n    /**\n     * Set the need redraw flag\n     * @param redraw\n     */\n    setRedraw(redraw: boolean) {\n        this.state.needsRedraw = redraw;\n    }\n\n    measureText(text: string) {\n        return this.ctx.measureText(text);\n    }\n\n    /**\n     * Trigger a redraw event\n     * Seems more responsive than setRedraw()\n     */\n    triggerRedraw() {\n        this.eventSystem.triggerEvent(EventKeys.REDRAW);\n    }\n\n    drawSVG(svg: string) {\n        const img = new Image();\n        img.src = \"data:image/svg+xml;base64,\" + btoa(svg);\n        this.ctx.drawImage(img, 0, 0);\n    }\n\n    drawImage(image: HTMLImageElement, x: number = 0, y: number = 0, width: number = 0, height: number = 0) {\n        this.ctx.drawImage(image, x, y, width, height);\n    }\n\n    drawArrow(pos: Point2D, rotation: number, length: number = 10) {\n        this.state.save();\n        this.offset(pos);\n        this.rotate(rotation);\n        this.ctx.beginPath();\n        this.ctx.moveTo(0, 0);\n        this.ctx.lineTo(length, 0);\n        this.ctx.lineTo(length - 5, -5);\n        this.ctx.stroke();\n        this.ctx.beginPath();\n        this.ctx.moveTo(length, 0);\n        this.ctx.lineTo(length - 5, 5);\n        this.restoreTranslate();\n        this.restoreTranslate();\n        this.state.restoreSave();\n        this.closeDraw();\n        // this.restoreTranslate();\n        // this.restoreTranslate();\n        // this.restoreTranslate();\n    }\n}\n", "import IHasCubism from \"../Interface/IGlobalHandler\";\nimport CubismPart from \"../CubismPart\";\nimport IEventManger from \"../Interface/IEventManger\";\n\n/**\n * System that handles the registration and trigger of global events\n */\nexport class CubismEventSystem extends CubismPart implements IEventManger {\n    private _globalEventListeners: { [key: string]: Function[] } = {};\n\n    getEvent(event: string): Function[] {\n        if (this._globalEventListeners[event] === undefined) {\n            this._globalEventListeners[event] = [];\n            this._globalEventListeners[event].push(() => {\n                // Log.logDebug(`Event ${event} triggered`);\n            });\n        }\n        return this._globalEventListeners[event];\n    }\n\n    registerEvent(eventKey: string, callback: Function): void {\n        this.getEvent(eventKey).push(callback);\n    }\n\n    triggerEvent(eventKey: string, ...args: any[]): void {\n        this.getEvent(eventKey).forEach((callback) => {\n            callback(...args);\n        });\n    }\n\n    unregisterEvent(eventKey: string, callback: Function): void {\n        this._globalEventListeners[eventKey].splice(this._globalEventListeners[eventKey].indexOf(callback), 1);\n    }\n\n    removeEvent(event: string) {\n        this._globalEventListeners[event] = [];\n    }\n\n    removeAllEvents() {\n        for (const event in this._globalEventListeners) {\n            this.removeEvent(event);\n        }\n        this._globalEventListeners = {};\n    }\n\n    hasEvent(event: string): boolean {\n        return this._globalEventListeners[event] !== undefined;\n    }\n}\n", "import {Point2D} from \"../Utils/Math/Point\";\n\nexport class PointerPoint extends Point2D {\n\n    constructor(x: number, y: number, public pressure: number) {\n        super(x, y);\n    }\n\n    static createFromPointerEvent(e: PointerEvent): PointerPoint {\n        return new PointerPoint(e.offsetX, e.offsetY, e.pressure);\n    }\n\n    toString(): string {\n        return `(x:${this.x}, y:${this.y}, p:${this.pressure})`;\n    }\n\n    sub(other: Point2D): PointerPoint {\n        return new PointerPoint(this.x - other.x, this.y - other.y, this.pressure);\n    }\n\n    get pressed(): boolean {\n        return this.pressure > 0;\n    }\n}\n", "import {CubismEventSystem} from \"../../Events/CubismEventSystem\";\nimport {Cubism} from \"../../Cubism\";\n\n/**\n * The global manager for Cubism outside the canvas\n * This is a singleton class\n */\nexport class CubismOuterGlobal {\n    private static _instance: CubismOuterGlobal;\n\n    private constructor() {\n    }\n\n    public static get instance(): CubismOuterGlobal {\n        if (!CubismOuterGlobal._instance) {\n            CubismOuterGlobal._instance = new CubismOuterGlobal();\n        }\n        return CubismOuterGlobal._instance;\n    }\n\n    private _cubismInstances: { [key: string]: Cubism } = {};\n\n    public static getCubismInstance(key: string): Cubism {\n        return CubismOuterGlobal.instance._cubismInstances[key];\n    }\n\n    public static registerCubismInstance(key: string, app: Cubism) {\n        if (CubismOuterGlobal.instance._cubismInstances[key] === undefined) {\n            CubismOuterGlobal.instance._cubismInstances[key] = app;\n        } else {\n            console.log(\"Replacing cubism instance with key \" + key);\n            this.getCubismInstance(key).destroy();\n            CubismOuterGlobal.instance._cubismInstances[key] = app;\n            // throw new Error(\"Cubism app with key [\" + key + \"] already exists\");\n        }\n    }\n}", "import {CubismElement} from \"./Elements/Basic/CubismElement\";\n\nexport default class CubismElementManger{\n\n    private _elementsWithId: { [key: string]: CubismElement } = {};\n\n    private _elementsWithClass: { [key: string]: CubismElement[] } = {};\n\n    public registerElementId(id: string, element: CubismElement) {\n        console.log(\"registering element with id \" + id);\n        if (this._elementsWithId[id] === undefined) {\n            this._elementsWithId[id] = element;\n        } else {\n            throw new Error(\"Element with that id already exists\");\n        }\n    }\n\n    public getElementById(id: string): CubismElement {\n        return this._elementsWithId[id];\n    }\n\n    public removeElementWithId(id: string) {\n        delete this._elementsWithId[id];\n    }\n\n    public registerElementClass(className: string, element: CubismElement) {\n        if (this._elementsWithClass[className] === undefined) {\n            this._elementsWithClass[className] = [];\n        }\n        this._elementsWithClass[className].push(element);\n    }\n\n    public getElementsByClass(className: string): CubismElement[] {\n        return this._elementsWithClass[className];\n    }\n\n    public removeElementWithClass(className: string, element: CubismElement) {\n        this._elementsWithClass[className].splice(this._elementsWithClass[className].indexOf(element), 1);\n    }\n\n    public removeClass(className: string) {\n        delete this._elementsWithClass[className];\n    }\n}", "import {CubismEventSystem} from \"./Events/CubismEventSystem\";\nimport IGlobalHandler from \"./Interface/IGlobalHandler\";\nimport IHasCubism from \"./Interface/IGlobalHandler\";\nimport CubismPart from \"./CubismPart\";\nimport {triggerAsyncId} from \"async_hooks\";\nimport {EventKeys} from \"./Constants/EventKeys\";\n\nexport default class CubismEventManager extends CubismPart {\n    get eventSystem(): CubismEventSystem {\n        return this.cubism.eventSystem;\n    }\n\n    /**\n     * Initialize a fix update\n     * @param timeInterval\n     */\n    initializeFixedUpdate(timeInterval: number = 1000 / 60) {\n        setInterval(this.doFixUpdate.bind(this), timeInterval);\n        return this;\n    }\n\n    doFixUpdate() {\n        this.eventSystem.triggerEvent(EventKeys.FIX_UPDATE);\n    }\n\n    /**\n     * Initialize the frame update\n     */\n    public initializeFrameUpdate() {\n        this.eventSystem.triggerEvent(EventKeys.FRAME_UPDATE);\n        window.requestAnimationFrame(this.doFrameUpdate.bind(this));\n        return this;\n    }\n\n    doFrameUpdate() {\n        this.eventSystem.triggerEvent(EventKeys.FRAME_UPDATE);\n        window.requestAnimationFrame(this.doFrameUpdate.bind(this));\n    }\n\n    /**\n     * Initialize the second update\n     */\n    public initializeSecondUpdate() {\n        setInterval(this.triggerSecondUpdate.bind(this), 1000);\n        return this;\n    }\n\n    triggerSecondUpdate() {\n        this.eventSystem.triggerEvent(EventKeys.SECOND_UPDATE);\n    }\n\n    /**\n     * Initialize the FPS counter\n     */\n    public initializeFPSCounter() {\n        if (!this.eventSystem.hasEvent(EventKeys.SECOND_UPDATE)) {\n            this.initializeSecondUpdate();\n        }\n        if (!this.eventSystem.hasEvent(EventKeys.FRAME_UPDATE)) {\n            this.initializeFrameUpdate();\n        }\n        this.eventSystem.registerEvent(EventKeys.SECOND_UPDATE, this.triggerFPSUpdate.bind(this));\n        this.eventSystem.registerEvent(EventKeys.FRAME_UPDATE, this.incrementFrameCount.bind(this));\n        return this;\n    }\n\n    frameCount: number = 0;\n\n    triggerFPSUpdate() {\n        this.eventSystem.triggerEvent(EventKeys.FPS_UPDATE, this.frameCount);\n        this.frameCount = 0;\n    }\n\n    incrementFrameCount() {\n        this.frameCount++;\n    }\n\n    /**\n     * Update canvas every frame\n     */\n    public initializeAlwaysRedraw() {\n        this.eventSystem.registerEvent(EventKeys.FRAME_UPDATE, this.triggerRedraw.bind(this));\n        return this;\n    }\n\n    triggerRedraw() {\n        this.eventSystem.triggerEvent(EventKeys.REDRAW);\n    }\n\n    /**\n     * Stop always redraw\n     */\n    public stopAlwaysRedraw() {\n        this.eventSystem.unregisterEvent(EventKeys.FRAME_UPDATE, this.triggerRedraw.bind(this));\n        return this;\n    }\n\n    /**\n     * Initialize the draw count counter\n     */\n    public initializeDrawsPerSecondCounter() {\n        this.eventSystem.registerEvent(EventKeys.REDRAW, this.onRedraw.bind(this));\n        if (!this.eventSystem.hasEvent(EventKeys.SECOND_UPDATE)) {\n            this.initializeSecondUpdate();\n        }\n        this.eventSystem.registerEvent(EventKeys.SECOND_UPDATE, this.doDrawCountUpdate.bind(this));\n        return this;\n    }\n\n    drawCount: number = 0;\n\n    onRedraw() {\n        this.drawCount++;\n    }\n\n    doDrawCountUpdate() {\n        this.eventSystem.triggerEvent(EventKeys.DRAW_COUNT_UPDATE, this.drawCount);\n        this.drawCount = 0;\n    }\n}\n", "import {CubismCanvasDrawer} from \"./Drawer/CubismCanvasDrawer\";\nimport {CubismEventSystem} from \"./Events/CubismEventSystem\";\nimport {EventKeys} from \"./Constants/EventKeys\";\nimport {Point2D} from \"./Utils/Math/Point\";\nimport {PointerPoint} from \"./Datatypes/PointerPoint\";\nimport {CubismOuterGlobal} from \"./Global/Outer/CubismOuterGlobal\";\nimport CubismPart from \"./CubismPart\";\nimport CubismElementManger from \"./CubismElementManger\";\nimport {CubismElement} from \"./Elements/Basic/CubismElement\";\nimport CubismEventManager from \"./CubismEventManager\";\n\n/**\n * Entry point of the application\n * Initializes different parts of the application\n */\nexport class Cubism extends CubismElementManger {\n    _root: CubismElement | null = null;\n    readonly canvas: HTMLCanvasElement;\n    readonly cubismId: string;\n    readonly canvasDrawer: CubismCanvasDrawer;\n    readonly eventSystem: CubismEventSystem;\n\n    get width() {\n        return this.canvas.width;\n    }\n    set width(width: number) {\n        this.canvas.width = width;\n    }\n    get height() {\n        return this.canvas.height;\n    }\n    set height(height: number) {\n        this.canvas.height = height;\n    }\n\n    _initializer: CubismEventManager;\n    get initializer() {\n        return this._initializer;\n    }\n\n    get rootElement(): CubismElement {\n        if (this._root === null) {\n            throw new Error(\"Root is not set\");\n        }\n        return this._root;\n    }\n\n    set rootElement(root) {\n\n        this.initParts(root);\n        this._root = root;\n    }\n\n\n    constructor(canvas: HTMLCanvasElement) {\n        super();\n        this.canvas = canvas;\n        this.eventSystem = new CubismEventSystem();\n        this.canvasDrawer = new CubismCanvasDrawer(canvas);\n        this._initializer = new CubismEventManager();\n\n        this.initParts(this.canvasDrawer, this.eventSystem, this.initializer);\n        this.registerRedraw();\n        this.registerGlobalPointerEvents();\n\n\n        if (canvas.id === null || canvas.id === undefined || canvas.id === \"\") {\n            throw new Error(\"Canvas must have an id\");\n        }\n        this.cubismId = canvas.id;\n\n        CubismOuterGlobal.registerCubismInstance(this.cubismId, this);\n    }\n\n\n    /**\n     * Register pointer events\n     */\n    registerGlobalPointerEvents() {\n        // on move\n        this.canvas.onpointermove = (e) => {\n            // console.log(\"onpointermove\");\n            this.eventSystem.triggerEvent(EventKeys.ON_POINTER_EVENT, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n        // on down\n        this.canvas.onpointerdown = (e) => {\n            this.eventSystem.triggerEvent(EventKeys.ON_POINTER_EVENT, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n        // on up\n        this.canvas.onpointerup = (e) => {\n            this.eventSystem.triggerEvent(EventKeys.ON_POINTER_EVENT, new PointerPoint(e.offsetX, e.offsetY, e.pressure));\n        }\n    }\n\n    registerRootElementPointerEvents() {\n\n        this.eventSystem.registerEvent(EventKeys.ON_POINTER_EVENT, (point: PointerPoint) => {\n            // console.log(`Pointer event [${point}]`);\n            this.rootElement.triggerEvent(EventKeys.ON_POINTER_EVENT, point);\n        });\n\n    }\n\n    registerRedraw() {\n        this.eventSystem.registerEvent(EventKeys.REDRAW, this.redraw.bind(this));\n    }\n\n    // registerOnMove() {\n    //     this.eventSystem.registerEvent(EventKeys.ON_MOVE, this.registerOnMove.bind(this));\n    // }\n\n    /**\n     * Create a new Cubism object from a canvas object\n     * @param canvas the canvas to draw on\n     */\n    static createFromCanvas(canvas: HTMLCanvasElement) {\n        return new Cubism(canvas);\n    }\n\n    /**\n     * Create a new Cubism object from a canvas id\n     * @param id the id of the canvas\n     */\n    static createFromId(id: string) {\n        return Cubism.createFromCanvas(document.getElementById(id) as HTMLCanvasElement);\n    }\n\n    init(root: CubismElement) {\n        this.rootElement = root;\n        this.initRootElement();\n        this.initializer.initializeFrameUpdate();\n\n        this.registerRootElementPointerEvents();\n        this.canvasDrawer.setRedraw(true);\n    }\n\n    private initRootElement() {\n        console.log(\"init root element\");\n        this.rootElement.resize(\n            new Point2D(this.canvas.width, this.canvas.height)\n        );\n    }\n\n    /**\n     * Redraw the whole canvas from the root element\n     */\n    redraw() {\n        // console.log(\"Redrawing\");\n        this.canvasDrawer.clear();\n        if (this.rootElement) {\n            this.rootElement.draw();\n        }\n    }\n\n    initParts(...parts: CubismPart[]) {\n        parts.forEach(part => {\n                part.cubism = this;\n                // console.log(`Initializing cubism part [${part}]`);\n            }\n        );\n    }\n\n    destroy() {\n        console.log(`Destroying [${this}]`);\n        this.eventSystem.removeAllEvents();\n\n        this.canvasDrawer.clear();\n    }\n\n    toString() {\n        return `Cubism [${this.cubismId}]`;\n    }\n}\n\n", "import { Point2D } from \"../Math/Point\";\nimport {CubismOuterGlobal} from \"../../Global/Outer/CubismOuterGlobal\";\n\nexport function initConsole() {\n    let w = window as any;\n    w.test = () => {\n        console.log('test');\n    }\n    w.cubismGlobal = CubismOuterGlobal.instance;\n    w.root = CubismOuterGlobal.getCubismInstance(\"mainCanvas\").rootElement;\n}\n", "export default class SizeKeys {\n    public static readonly DEFAULT_PADDING = 10;\n    public static readonly DEFAULT_MARGIN = 10;\n    public static readonly DEFAULT_BORDER = 1;\n\n    public static readonly MATCH_PARENT = -1;\n}", "import CubismPart from \"../../CubismPart\";\n\n/**\n * A decorator that trys to redraw the canvas after the accessor is called.\n * @param needsRedrawGet if true, the getter will be decorated\n * @param needsRedrawSet if true, the setter will be decorated\n */\nexport function needsRedrawAccessor(needsRedrawGet = false, needsRedrawSet = true) {\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        if (descriptor) {\n            if (descriptor.set && needsRedrawSet) {\n                // console.log(\"descriptor.set is:\");\n                // console.log(descriptor.set);\n                let oldSet = descriptor.set;\n                descriptor.set = function (value: any) {\n                    oldSet.call(this, value);\n                    setRedrawHelper(this);\n                }\n            }\n            if (descriptor.get && needsRedrawGet) {\n                let oldGet = descriptor.get;\n                descriptor.get = function () {\n                    setRedrawHelper(this);\n                    return oldGet.call(this);\n                }\n            }\n        }\n    };\n}\n\nfunction setRedrawHelper(descriptor: any) {\n    if (descriptor instanceof CubismPart) {\n        if (descriptor._cubism) {\n            descriptor._cubism.canvasDrawer.setRedraw(true);\n        }\n    } else {\n        console.log(\"this is not a CubismPart\");\n        throw new Error(\"this is not a CubismPart\");\n    }\n}", "import {Point2D} from \"../../Utils/Math/Point\";\nimport {CubismCanvasDrawer} from \"../../Drawer/CubismCanvasDrawer\";\nimport {Cubism} from \"../../Cubism\";\nimport {CubismEventSystem} from \"../../Events/CubismEventSystem\";\nimport SizeKeys from \"../../Constants/SizeKeys\";\nimport {needsRedrawAccessor} from \"../../Utils/Decorators/NeedsRedraw\";\n\n/**\n * Base class for all elements that can be rendered on the canvas\n * With size, position, and global events\n */\nexport class CubismElement extends CubismEventSystem implements IDrawable {\n    _position: Point2D = new Point2D(0, 0);\n    _size: Point2D = new Point2D(SizeKeys.MATCH_PARENT, SizeKeys.MATCH_PARENT);\n    _absSize: Point2D = new Point2D(0, 0); // Absolute size is the size of the element\n    _anchor: Point2D = new Point2D(0, 0);\n\n\n    elementId: string | null = null;\n    needsResize: boolean = true;\n\n    constructor(elementId: string | null = null) {\n        super();\n        // Optional id\n        this.elementId = elementId;\n        this.onCreate();\n    }\n\n    onCreate(): void {\n\n    }\n\n\n    get anchor(): Point2D {\n        return this._anchor;\n    }\n\n    @needsRedrawAccessor()\n    set anchor(anchor: Point2D) {\n        this._anchor = anchor;\n    }\n\n    /**\n     * Set id for this element so that it can be accessed by the id\n     * @param id\n     */\n    setId(id: string): this {\n        this.elementId = id;\n        if (this._cubism) {\n            this._cubism.registerElementId(id, this);\n        }\n        return this;\n    }\n\n    /**\n     * Set cubism instance for this element\n     * @param cubism\n     */\n    setCubism(cubism: Cubism): void {\n        super.setCubism(cubism);\n        if (this.elementId !== null) {\n            this.setId(this.elementId);\n        }\n    }\n\n    /**\n     * Set position of this element relative to parent\n     * @param pos\n     */\n    @needsRedrawAccessor()\n    set position(pos: Point2D) {\n        this._position = pos;\n        // this.c.setRedraw(true);\n    }\n\n    /**\n     * Get position of this element relative to parent\n     */\n    get position(): Point2D {\n        return this._position;\n    }\n\n    /**\n     * Get a size description of this element\n     * Not necessarily the size of the element\n     */\n\n    get size(): Point2D {\n        return this._size;\n    }\n\n    /**\n     * Set size of this element\n     *\n     * @param size size description\n     */\n    set size(size: Point2D) {\n        this.setSizeFromXY(size.x, size.y);\n    }\n\n    setSizeFromXY(x: number, y: number): this {\n        this.size.x = x;\n        this.size.y = y;\n        this.needsResize = true;\n        return this;\n    }\n\n    /**\n     * Get the actual size of this element\n     */\n    get absSize(): Point2D {\n        return this._absSize;\n    }\n\n    /**\n     * Set the actual size of this element\n     * @param size\n     */\n    @needsRedrawAccessor()\n    set absSize(size: Point2D) {\n        this._absSize = size;\n        this.c.setRedraw(true);\n    }\n\n    get height(): number {\n        return this.size.y;\n    }\n\n    set height(y: number) {\n        this.setSizeFromXY(this.width, y);\n    }\n\n    get width(): number {\n        return this.size.x;\n    }\n\n    set width(x: number) {\n        this.setSizeFromXY(x, this.height);\n    }\n\n    get absWidth(): number {\n        return this.absSize.x;\n    }\n\n    set absWidth(x: number) {\n        this.absSize.x = x;\n    }\n\n    get absHeight(): number {\n        return this.absSize.y;\n    }\n\n    set absHeight(y: number) {\n        this.absSize.y = y;\n    }\n\n    setWidth(width: number) {\n        this.width = width;\n        this.needsResize = true;\n        return this;\n    }\n\n    setHeight(height: number) {\n        this.height = height;\n        return this;\n    }\n\n    setPosFromPoint(pos: Point2D): this {\n        this.position = pos;\n        return this;\n    }\n\n    setPosFromXY(x: number, y: number): this {\n        this.position.x = x;\n        this.position.y = y;\n        return this;\n    }\n\n    get centerPoint(): Point2D {\n        return new Point2D(this.position.x + this.width / 2, this.position.y + this.height / 2);\n    }\n\n\n    /**\n     * Resize this element to targetSize size\n     * and mark it as resized\n     * @param targetSize\n     */\n    resize(targetSize: Point2D) {\n        this.resizeFromXY(targetSize.x, targetSize.y);\n    }\n\n    /**\n     * Resize this element to targetSize size\n     * and mark it as resized\n     * @param x width\n     * @param y height\n     */\n    resizeFromXY(x: number, y: number): void {\n        this.absWidth = x;\n        this.absHeight = y;\n        this.needsResize = false;\n    }\n\n    /**\n     * Get canvas drawer\n     */\n    get c(): CubismCanvasDrawer {\n        if (!this.cubism) {\n            console.log(this.cubism)\n            throw new Error(`Cubism instance not set for ${this}`);\n        }\n        return this.cubism.canvasDrawer;\n    }\n\n\n\n    /**\n     * Render this element\n     */\n    draw(): void {\n    }\n\n    /**\n     * Get a string representation of this element\n     */\n    toString(): string {\n        return `[${this.elementId ? this.elementId : \"NO ID\"}]: ${this.className} abs(${this.absWidth}x${this.absHeight}) rel(${this.width}x${this.height})`;\n    }\n\n}\n", "/**\n * An Element with children\n */\nimport {CubismElement} from \"./CubismElement\";\nimport {Cubism} from \"../../Cubism\";\nimport {Point2D} from \"../../Utils/Math/Point\";\nimport SizeKeys from \"../../Constants/SizeKeys\";\n\nexport default class CubismParentElement extends CubismElement {\n    children: CubismElement[];\n\n    constructor(elementId: string | null = null, ...children: CubismElement[]) {\n        super(elementId);\n        this.children = [];\n        this.addChildren(...children);\n    }\n\n    /**\n     * Called by initElement.\n     * Therefore, no need to overload initElement\n     * @param targetSize\n     */\n    resize(targetSize: Point2D) {\n        super.resize(targetSize);\n        this.updateChildrenShape()\n    }\n\n    /**\n     * Updates the children's shape\n     */\n    updateChildrenShape() {\n        this.updateChildrenSize();\n        this.updateChildrenPosition();\n    }\n\n    /**\n     * Updates the children's position\n     */\n    updateChildrenPosition() {\n\n    }\n\n    /**\n     * Updates the children's size according to the layout\n     */\n    updateChildrenSize() {\n        for (let child of this.children) {\n            let x = child.width;\n            let y = child.height;\n            if (x === SizeKeys.MATCH_PARENT) {\n                x = this.absWidth;\n            }\n            if (y === SizeKeys.MATCH_PARENT) {\n                y = this.absHeight;\n                console.log(\"this.absHeight\", this.absHeight);\n            }\n            child.resize(new Point2D(x, y));\n        }\n    }\n\n    /**\n     * Adds children to the element\n     * @param children\n     */\n    addChildren(...children: CubismElement[]): this {\n        if (children === undefined) {\n            console.log(\"children is undefined\");\n            return this;\n        }\n        for (let child of children) {\n            this.children.push(child);\n            if (this._cubism) {\n                child.setCubism(this.cubism);\n                this.updateChildrenShape();\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Removes a child from the element\n     * @param child\n     */\n    removeChild(child: CubismElement): void {\n        let index = this.children.indexOf(child);\n        if (index > -1) {\n            this.children.splice(index, 1);\n        }\n    }\n\n    /**\n     * Removes given children from the element\n     * @param children\n     */\n    removeChildren(children: CubismElement[]): void {\n        for (let child of children) {\n            this.removeChild(child);\n        }\n    }\n\n    /**\n     * Draws current element and its children\n     */\n    draw() {\n        super.draw();\n        this.drawChildren();\n    }\n\n    /**\n     * Draws the children\n     */\n    drawChildren() {\n        this.c.offset(this.position);\n        for (let child of this.children) {\n            child.draw();\n        }\n        this.c.restoreTranslate();\n    }\n\n    /**\n     * Sets the cubism instance for the element and its children\n     * @param cubism\n     */\n    setCubism(cubism: Cubism) {\n        super.setCubism(cubism);\n        this.setChildrenCubism(cubism);\n    }\n\n    /**\n     * Sets the cubism instance for the children\n     * @param cubism\n     */\n    setChildrenCubism(cubism: Cubism) {\n        for (let child of this.children) {\n            child.setCubism(cubism);\n        }\n    }\n}\n", "import CubismParentElement from \"./CubismParentElement\";\nimport {Point2D} from \"../../Utils/Math/Point\";\nimport {EventKeys} from \"../../Constants/EventKeys\";\nimport {PointerPoint} from \"../../Datatypes/PointerPoint\";\nimport {CubismElement} from \"./CubismElement\";\n\nexport default class PointerHandlerParentElement extends CubismParentElement {\n    _dragPoint: PointerPoint | null = null;\n    _pointerWasInRange: boolean = false;\n    _hovered: boolean = false;\n    _pressed: boolean = false;\n\n    get pressed(): boolean {\n        return this._pressed;\n    }\n\n    set pressed(value: boolean) {\n        this._pressed = value;\n    }\n\n    get hovered(): boolean {\n        return this._hovered;\n    }\n\n    set hovered(value: boolean) {\n        this._hovered = value;\n    }\n\n    constructor(id: string | null = null, ...children: CubismElement[]) {\n        super(id, ...children);\n        this.registerEvent(EventKeys.ON_POINTER_EVENT, this.onPointerEvent.bind(this));\n        this.internalAddChildren();\n    }\n\n    internalAddChildren() {\n\n    }\n\n    onDown(point: PointerPoint) {\n        // console.log(\"onDown\");\n    }\n\n    onUp(point: PointerPoint) {\n        // console.log(\"onUp\");\n    }\n\n    onLeave(point: PointerPoint) {\n        // console.log(\"onLeave\");\n\n    }\n\n    onEnter(point: PointerPoint) {\n        // console.log(\"onEnter\");\n    }\n\n    onMove(point: PointerPoint) {\n        // console.log(\"onMove\");\n    }\n\n    onParentMove(point: PointerPoint) {\n\n    }\n\n\n    onPointerEvent(point: PointerPoint) {\n        this.triggerThisPointerEvent(point);\n        this.triggerChildrenPointerEvent(point.sub(this.position));\n    }\n\n    triggerThisPointerEvent(point: PointerPoint) {\n        this.onParentMove(point);\n        /**\n         * If the pointer is in range of the element\n         */\n        if (this.pointerInRange(point)) {\n            if (!this._pointerWasInRange) {\n                this.onEnter(point);\n            }\n            this._pointerWasInRange = true;\n            this.onMove(point);\n\n            if (!point.pressed) {\n                this.hovered = true;\n            }\n\n            if (point.pressed && !this.pressed) {\n                this.onDown(point);\n                this._dragPoint = point;\n                this.pressed = true;\n            }\n            if (!point.pressed && this.pressed) {\n                this.onUp(point);\n                this._dragPoint = null;\n                this.pressed = false;\n            }\n        }\n        /**\n         * Not in range\n         */\n        else {\n            this.hovered = false;\n            if (this._pointerWasInRange) {\n                this.onLeave(point);\n                this._pointerWasInRange = false;\n            }\n        }\n    }\n\n    /**\n     * Triggers the pointer event on the children\n     * @param point the pointer point relative to the parent\n     */\n    triggerChildrenPointerEvent(point: PointerPoint) {\n        if (this.pointerInRange(point)) {\n            // console.log(\"Children pointer point: \", childrenPointerPoint);\n            for (let child of this.children) {\n                // console.log(`Triggering child ${child}`);\n                // if (child instanceof PointerHandlerParentElement) {\n                //     if (child.pointerInRange(point)) {\n                //         child.triggerThisPointerEvent(point);\n                //         break;\n                //     }\n                // }\n                child.triggerEvent(EventKeys.ON_POINTER_EVENT, point);\n            }\n        }\n    }\n\n    /**\n     * Checks if the pointer is in range of the element\n     * @param point The pointer point\n     */\n    pointerInRange(point: Point2D): boolean {\n        if (point.x >= this.position.x && point.x <= this.absWidth + this.position.x) {\n            if (point.y >= this.position.y && point.y <= this.absHeight + this.position.y) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n", "export class Colors {\n    public static readonly black = \"#000000\";\n    public static readonly white = \"#ffffff\";\n    public static readonly pureRed = \"#ff0000\";\n    public static readonly pureGreen = \"#00ff00\";\n    public static readonly pureBlue = \"#0000ff\";\n    public static readonly pureYellow = \"#ffff00\";\n    public static readonly pureCyan = \"#00ffff\";\n    public static readonly pureMagenta = \"#ff00ff\";\n    public static readonly orange = \"#ff8000\";\n    public static readonly purple = \"#8000ff\";\n    public static readonly pink = \"#ff0080\";\n    public static readonly brown = \"#804000\";\n    public static readonly grey100 = \"#efefef\";\n    public static readonly grey200 = \"#a0a0a0\";\n    public static readonly grey300 = \"#808080\";\n    public static readonly grey400 = \"#606060\";\n    public static readonly grey500 = \"#404040\";\n    public static readonly grey600 = \"#202020\";\n    public static readonly grey700 = \"#000000\";\n    public static readonly blue100 = \"#a6d5ff\";\n    public static readonly blue200 = \"#7ec0ff\";\n    public static readonly blue300 = \"#57abff\";\n    public static readonly blue400 = \"#2e96ff\";\n    public static readonly blue500 = \"#0080ff\";\n    public static readonly blue600 = \"#0060cc\";\n    public static readonly blue700 = \"#004099\";\n    public static readonly green100 = \"#a6ffcc\";\n    public static readonly green200 = \"#7effa6\";\n    public static readonly green300 = \"#57ff80\";\n    public static readonly green400 = \"#2eff5a\";\n    public static readonly green500 = \"#00ff00\";\n    public static readonly green600 = \"#00cc00\";\n    public static readonly green700 = \"#009900\";\n    public static readonly red100 = \"#ffcccc\";\n    public static readonly red200 = \"#ff9999\";\n    public static readonly red300 = \"#ff6666\";\n    public static readonly red400 = \"#ff3333\";\n    public static readonly red500 = \"#ff0000\";\n    public static readonly red600 = \"#cc0000\";\n    public static readonly red700 = \"#990000\";\n    public static readonly yellow100 = \"#ffffcc\";\n    public static readonly yellow200 = \"#ffff99\";\n    public static readonly yellow300 = \"#ffff66\";\n    public static readonly yellow400 = \"#ffff33\";\n    public static readonly yellow500 = \"#ffff00\";\n    public static readonly yellow600 = \"#cccc00\";\n    public static readonly yellow700 = \"#999900\";\n    public static readonly cyan100 = \"#ccffff\";\n    public static readonly cyan200 = \"#99ffff\";\n    public static readonly cyan300 = \"#66ffff\";\n    public static readonly cyan400 = \"#33ffff\";\n    public static readonly cyan500 = \"#00ffff\";\n    public static readonly cyan600 = \"#00cccc\";\n    public static readonly cyan700 = \"#009999\";\n    public static readonly magenta100 = \"#ffccff\";\n    public static readonly magenta200 = \"#ff99ff\";\n    public static readonly magenta300 = \"#ff66ff\";\n    public static readonly magenta400 = \"#ff33ff\";\n    public static readonly magenta500 = \"#ff00ff\";\n    public static readonly magenta600 = \"#cc00cc\";\n    public static readonly magenta700 = \"#990099\";\n    public static readonly orange100 = \"#ffcc99\";\n    public static readonly orange200 = \"#ff9966\";\n    public static readonly orange300 = \"#ff9933\";\n    public static readonly orange400 = \"#ff9900\";\n    public static readonly orange500 = \"#ff8000\";\n    public static readonly orange600 = \"#cc6600\";\n    public static readonly orange700 = \"#994c00\";\n    public static readonly purple100 = \"#cc99ff\";\n    public static readonly purple200 = \"#9966ff\";\n    public static readonly purple300 = \"#9933ff\";\n    public static readonly purple400 = \"#9900ff\";\n    public static readonly purple500 = \"#8000ff\";\n    public static readonly purple600 = \"#6600cc\";\n    public static readonly purple700 = \"#4c0099\";\n    public static readonly pink100 = \"#ff99cc\";\n    public static readonly pink200 = \"#ff6699\";\n    public static readonly pink300 = \"#ff3399\";\n    public static readonly pink400 = \"#ff0099\";\n    public static readonly pink500 = \"#ff0080\";\n    public static readonly pink600 = \"#cc0066\";\n    public static readonly pink700 = \"#99004c\";\n    public static readonly brown100 = \"#cc9966\";\n    public static readonly brown200 = \"#996633\";\n    public static readonly brown300 = \"#994c00\";\n    public static readonly brown400 = \"#993300\";\n    public static readonly brown500 = \"#804000\";\n    public static readonly brown600 = \"#663300\";\n    public static readonly brown700 = \"#4c2600\";\n\n    public static readonly lightGray = \"#c0c0c0\";\n    public static readonly darkGray = \"#404040\";\n    public static readonly lightRed = \"#ff8080\";\n    public static readonly lightGreen = \"#80ff80\";\n    public static readonly lightBlue = \"#8080ff\";\n    public static readonly lightYellow = \"#ffff80\";\n    public static readonly lightCyan = \"#80ffff\";\n    public static readonly lightMagenta = \"#ff80ff\";\n    public static readonly darkRed = \"#800000\";\n    public static readonly darkGreen = \"#008000\";\n    public static readonly darkBlue = \"#000080\";\n    public static readonly darkYellow = \"#808000\";\n    public static readonly darkCyan = \"#008080\";\n    public static readonly darkMagenta = \"#800080\";\n    public static readonly transparent = \"rgba(0,0,0,0)\";\n    public static readonly transparentBlack = \"rgba(0,0,0,0.5)\";\n    public static readonly transparentWhite = \"rgba(255,255,255,0.5)\";\n    public static readonly transparentRed = \"rgba(255,0,0,0.5)\";\n    public static readonly transparentGreen = \"rgba(0,255,0,0.5)\";\n    public static readonly transparentBlue = \"rgba(0,0,255,0.5)\";\n    public static readonly transparentYellow = \"rgba(255,255,0,0.5)\";\n    public static readonly transparentCyan = \"rgba(0,255,255,0.5)\";\n    public static readonly transparentMagenta = \"rgba(255,0,255,0.5)\";\n    public static readonly transparentOrange = \"rgba(255,128,0,0.5)\";\n    public static readonly transparentPurple = \"rgba(128,0,255,0.5)\";\n    public static readonly transparentPink = \"rgba(255,0,128,0.5)\";\n}", "import {Point2D} from \"../../Math/Point\";\n\nexport default class PhysicalPoint2D extends Point2D {\n    velocity: Point2D = new Point2D(0, 0);\n    // acceleration: Point2D = new Point2D(0, 0);\n    resistance: number = 0;\n    velocityScale: number = 0;\n\n    setVelocity(velocity: Point2D) {\n        this.velocity = velocity;\n        return this;\n    }\n\n    setResistance(resistance: number) {\n        this.resistance = resistance;\n        return this;\n    }\n\n    impulse(impulse: Point2D) {\n        this.velocity.offset(impulse);\n        this.velocityScale = 1;\n        return this;\n    }\n\n    update() {\n        if (this.velocityScale > 0) {\n            this.velocity = this.velocity.scale(this.velocityScale);\n            this.velocityScale -= this.resistance;\n        }\n        if (this.velocityScale < 0) {\n            this.velocityScale = 0;\n        }\n        if (this.velocityScale == 0) {\n            this.velocity.setXY(0, 0)\n        }\n        this.offset(this.velocity);\n    }\n\n}\n", "import PointerHandlerParentElement from \"../Basic/PointerHanderParentElement\";\nimport {Colors} from \"../../Constants/Colors\";\nimport {PointerPoint} from \"../../Datatypes/PointerPoint\";\nimport {Point2D} from \"../../Utils/Math/Point\";\nimport {CubismElement} from \"../Basic/CubismElement\";\nimport PhysicalPoint2D from \"../../Utils/Physics/Physics2D/PhysicalPoint2D\";\nimport {needsRedrawAccessor} from \"../../Utils/Decorators/NeedsRedraw\";\n\nexport default class RecursiveRect extends PointerHandlerParentElement {\n    lastPoint: PointerPoint | null = null;\n    relativePosition: Point2D = new Point2D(200, 200);\n\n    frameCount: number = 0;\n\n    _position: PhysicalPoint2D = new PhysicalPoint2D(0, 0).setResistance(0.001);\n    @needsRedrawAccessor(true, true)\n    get position(): PhysicalPoint2D {\n        return this._position;\n    }\n    set position(point: PhysicalPoint2D) {\n        this._position = point;\n    }\n\n    recursionCount: number = 0;\n    wiggleStrength: number = 0.1;\n\n    setRecursionCount(recursionCount: number) {\n        this.recursionCount = recursionCount;\n        return this;\n    }\n\n    wiggle() {\n        if (this.frameCount % 120 == 0) {\n            let range = this.wiggleStrength * Math.random();\n            this.position.impulse(new Point2D(range * (Math.random() - 0.5), range * (Math.random() - 0.5)));\n        }\n    }\n\n    setWiggleStrength(strength: number) {\n        this.wiggleStrength = strength;\n        return this;\n    }\n\n    setRelativePosition(point: Point2D) {\n        this.relativePosition = point;\n        return this;\n    }\n\n    draw() {\n        this.frameCount++;\n        this.c.offset(this.position);\n\n        this.position.update();\n        if (!this.pressed) {\n            this.wiggle();\n        }\n        if (this.pressed) {\n            this.frameCount = 0;\n        }\n        this.c.setFillStyle(Colors.green100);\n        this.c.setStrokeWidth(2);\n        this.c.setStrokeStyle(Colors.green700);\n        let relaPos = this.position.sub(this.relativePosition);\n        let relaSpeed = 0.2;\n        let relaSize = 10;\n        this.c.drawRect(0, 0, this.width, this.height);\n        for (let i = 1; i < this.recursionCount + 1; i++) {\n            let relaSpeedI = relaSpeed * i;\n            let relaSizeI = relaSize * i;\n            this.c.offset(relaPos.scale(relaSpeedI));\n            this.c.drawRect(relaSizeI, relaSizeI, this.width - relaSizeI, this.height - relaSizeI);\n            this.c.restoreTranslate();\n        }\n        this.c.restoreTranslate();\n    }\n\n    onMove(point: PointerPoint) {\n        if (point.pressure > 0) {\n            if (!this.lastPoint) {\n                this.lastPoint = point.sub(this.position);\n            }\n            this.position.set(point.sub(this.lastPoint));\n        } else {\n            this.lastPoint = null;\n        }\n    }\n}\n", "import PointerHandlerParentElement from \"../Basic/PointerHanderParentElement\";\nimport {CubismElement} from \"../Basic/CubismElement\";\nimport {Colors} from \"../../Constants/Colors\";\nimport {Cubism} from \"../../Cubism\";\nimport {needsRedrawAccessor} from \"../../Utils/Decorators/NeedsRedraw\";\n\nexport class ChangingRainbowBackground extends CubismElement{\n    frameCount: number = 0;\n\n    saturation:number = 70;\n    lightness: number = 90;\n    changingSpeed: number = 0.2;\n\n    setSaturation(s: number) {\n        if (s > 100) {\n            s = 100;\n        }\n        this.saturation = s;\n        return this;\n    }\n    setChangingSpeed(speed: number) {\n        this.changingSpeed = speed;\n        return this;\n    }\n    setLightness(l: number) {\n        if (l > 100) {\n            l = 100;\n        }\n        this.lightness = l;\n        return this;\n    }\n    draw() {\n        this.frameCount++;\n        this.c.offset(this.position);\n        let currHue = this.frameCount * this.changingSpeed % 360;\n        let currColor = `hsl(${currHue}, ${this.saturation}%, ${this.lightness}%)`;\n\n        this.c.setFillStyle(currColor);\n        this.c.setStrokeWidth(0);\n        this.c.setStrokeStyle(currColor);\n        this.c.drawRect(0, 0, this.absWidth, this.absHeight);\n        // super.draw();\n        this.c.restoreTranslate();\n    }\n}\n", "export default class CanvasRecorder {\n    canvas: HTMLCanvasElement;\n    fps: number;\n    recorder: MediaRecorder | null = null;\n    chunks: Blob[] = [];\n    videoStream: MediaStream | null = null;\n    isRecording: boolean = false;\n\n    /**\n     * Create a new CanvasRecorder\n     * @param canvas\n     * @param fps\n     */\n    constructor(canvas: HTMLCanvasElement | string, fps = 60) {\n        if (typeof canvas === \"string\") {\n            let tempCanvas = document.getElementById(canvas);\n            if (!tempCanvas) {\n                throw new Error(\"Canvas not found\");\n            }\n            this.canvas = tempCanvas as HTMLCanvasElement;\n        } else {\n            this.canvas = canvas;\n        }\n        this.fps = fps;\n    }\n\n    /**\n     * Start recording\n     * @param fileName The name of the file to save\n     * @param fileType The type of the file to save\n     */\n    startRecording(fileName = \"video\", fileType = \"webm\"): void {\n        this.videoStream = this.canvas.captureStream(this.fps);\n        this.recorder = new MediaRecorder(this.videoStream);\n\n        this.chunks = [];\n\n        this.recorder.ondataavailable = (e) => {\n            this.chunks.push(e.data);\n        }\n        this.recorder.start();\n\n        this.recorder.onstop = () => {\n            console.log(\"Recording stopped\");\n            let blob = new Blob(this.chunks, {type: `video/${fileType}`});\n            let url = URL.createObjectURL(blob);\n            let a = document.createElement(\"a\");\n            a.href = url;\n            a.download = `${fileName}.${fileType}`;\n            a.click();\n            URL.revokeObjectURL(url);\n        }\n\n        this.isRecording = true;\n    }\n\n    /**\n     * Stop recording\n     */\n    stopRecording(): void {\n        if (this.recorder) {\n            if (this.recorder.state === \"recording\") {\n                console.log(\"is recording\");\n                this.recorder.stop();\n            }\n        }\n        this.isRecording = false;\n    }\n}\n", "import {CubismOuterGlobal} from \"../Global/Outer/CubismOuterGlobal\";\nimport CanvasRecorder from \"./CanvasRecorder\";\n\nexport class StaticDemo {\n    private static _instance: StaticDemo;\n\n    private _demoFunctions: { [key: string]: DemoFunction } = {};\n\n    selector: HTMLSelectElement = document.getElementById(\"selector\") as HTMLSelectElement;\n    codeText: HTMLTextAreaElement = document.getElementById(\"codeText\") as HTMLTextAreaElement;\n    descriptionText: HTMLDivElement = document.getElementById(\"descriptionText\") as HTMLDivElement;\n\n    controlDiv: HTMLDivElement = document.getElementById(\"controlDiv\") as HTMLDivElement;\n\n    currDemoFunction: DemoFunction | null = null;\n\n    hotReloadCheckbox: HTMLInputElement | null = null;\n    updateButton: HTMLButtonElement | null = null;\n\n    // currentDemoName: string | null = null;\n    canvasRecorder: CanvasRecorder = new CanvasRecorder(\"mainCanvas\");\n\n    private constructor() {\n        this.initSelector();\n        this.initCodeText();\n        this.resetControlsDiv();\n        this.resetCanvas();\n        this.initRecorder();\n    }\n\n    initRecorder() {\n        let recordBtn = document.getElementById(\"recordBtn\") as HTMLButtonElement;\n        let recordText = \"Start Recording\";\n        let stopText = \"Stop\";\n        recordBtn.innerText = recordText;\n        recordBtn.onclick = () => {\n            if (this.canvasRecorder.isRecording) {\n                this.canvasRecorder.stopRecording();\n                recordBtn.innerText = recordText;\n            } else {\n\n                this.canvasRecorder.startRecording(`${this.selector.value}-${new Date().toLocaleString()}`, \"mp4\");\n                recordBtn.innerText = stopText;\n            }\n        }\n    }\n\n\n    initControlDiv() {\n        this.initHotReload();\n        this.initUpdateButton();\n    }\n\n    resetControlsDiv() {\n        this.controlDiv.innerHTML = \"\";\n        this.initControlDiv();\n    }\n\n    initHotReload() {\n        let hotReload = document.createElement(\"input\");\n        hotReload.type = \"checkbox\";\n        hotReload.id = \"hotReloadCheckbox\";\n        hotReload.checked = true;\n        this.hotReloadCheckbox = hotReload;\n\n        let hotReloadLabel = document.createElement(\"label\");\n        hotReloadLabel.htmlFor = \"hotReloadCheckbox\";\n        hotReloadLabel.innerHTML = \"Hot Reload\";\n        hotReloadLabel.style.marginRight = \"10px\";\n\n        this.controlDiv.appendChild(hotReload);\n        this.controlDiv.appendChild(hotReloadLabel);\n    }\n\n    initCodeText() {\n        this.codeText.onchange = this.onCodeTextChange.bind(this);\n        this.codeText.oninput = this.onCodeTextInput.bind(this);\n    }\n\n    initUpdateButton() {\n        let updateButton = document.createElement(\"button\");\n        updateButton.innerHTML = \"Reload\";\n        updateButton.onclick = this.updateButtonOnClick.bind(this);\n        this.updateButton = updateButton;\n        this.controlDiv.appendChild(updateButton);\n    }\n\n    updateButtonOnClick() {\n        this.updateCurrDemoFunction();\n    }\n\n    updateCurrDemoFunction() {\n        console.log(\"updateCurrDemoFunction\");\n        CubismOuterGlobal.getCubismInstance(\"mainCanvas\").destroy();\n        this.resetCanvas();\n\n        let currName = this.selector.value;\n\n        this._demoFunctions[currName].setFunctionThroughFormattedString(this.codeText.value);\n\n        this.setCurrentDemoCode(this.selector.value);\n\n        this.resetControlsDiv();\n    }\n\n\n    onCodeTextInput() {\n        // console.log(\"code text input\");\n        if (this.hotReloadCheckbox && this.hotReloadCheckbox.checked) {\n            this.updateCurrDemoFunction();\n        }\n    }\n\n    onCodeTextChange() {\n    }\n\n\n    initSelector() {\n        this.selector.onchange = this.onSelectorChange.bind(this);\n        this.selector.onload = this.onSelectorChange.bind(this);\n    }\n\n    resetCanvas() {\n        let canvas = document.getElementById(\"mainCanvas\") as HTMLCanvasElement;\n        canvas.width = 400;\n        canvas.height = 400;\n    }\n\n    setCurrentDemoCode(name: string) {\n        this.codeText.value = this._demoFunctions[name].toString();\n        this.selector.value = name;\n        this.descriptionText.innerHTML = this._demoFunctions[name].description;\n\n        this.currDemoFunction = this._demoFunctions[name];\n\n        this.runCurrentDemo();\n    }\n\n    runCurrentDemo() {\n        if (this.currDemoFunction) {\n            this.currDemoFunction.run();\n        }\n    }\n\n    /**\n     * Add a demo function to the dict of demo functions\n     * @param name\n     * @param func\n     * @param description optional description of the demo function\n     */\n    addDemoFunction(name: string, func: Function, description: string = \"[No description]\") {\n        let option = document.createElement(\"option\");\n        option.text = name;\n        this.selector.add(option);\n\n        this._demoFunctions[name] = new DemoFunction(func, name, description);\n        this.setCurrentDemoCode(name);\n    }\n\n\n    onSelectorChange() {\n        let selected = this.selector.options[this.selector.selectedIndex].text;\n        console.log(`selected: ${selected}`);\n        this.setCurrentDemoCode(selected);\n        this.updateCurrDemoFunction();\n    }\n\n    createFunctionFromString(s: string) {\n        return new Function(s) as () => void;\n    }\n\n    static get i() {\n        if (!StaticDemo._instance) {\n            StaticDemo._instance = new StaticDemo();\n        }\n        return StaticDemo._instance;\n    }\n}\n\nclass DemoFunction {\n    func: Function;\n    funcName: string;\n    description: string;\n\n    constructor(func: Function, funcName: string, description: string) {\n        this.func = func;\n\n        this.funcName = funcName;\n        this.description = description;\n    }\n\n    toString() {\n        return this.functionToFormattedString(this.funcName, this.func);\n    }\n\n    functionToFormattedString(funcName: string, func: Function) {\n        let s = func.toString();\n        // Remove the first and last line\n        s = s.substring(s.indexOf(\"{\") + 1, s.lastIndexOf(\"}\"));\n        // Add a new line after each object\n        s = s.replace(/;/g, \";\\n\");\n\n        // Remove empty line at the beginning\n        s = s.replace(/^\\s*\\n/gm, \"\");\n        // Remove empty line at the end\n        s = s.replace(/\\n\\s*$/gm, \"\");\n\n        let leadingSpacesCount = 0;\n        if (s.length > 0) {\n            while (s[leadingSpacesCount] === \" \") {\n                leadingSpacesCount++;\n            }\n        }\n\n        // // Remove leading spaces\n        let p = `^ {${leadingSpacesCount}}`;\n        s = s.replace(new RegExp(p, \"gm\"), \"\");\n\n        let lines = s.split(\"\\n\");\n\n        let newString = \"\";\n        for (let i = 0; i < lines.length; i++) {\n            let line = lines[i];\n            if (i == 0) {\n                newString += line;\n            } else {\n                let currLeadingSpacesCount = 0;\n                while (line[currLeadingSpacesCount] === \" \") {\n                    currLeadingSpacesCount++;\n                }\n\n                if (currLeadingSpacesCount === 0 && line.length > 0 && !(line[0] === \"}\" || line[0] === \")\")) {\n                    newString += `\\n`;\n                }\n\n                let spaces = new Array(currLeadingSpacesCount + 5).join(\" \");\n                // console.log(`spaces: [${spaces}]`);\n                // newString += \"\\n\" + line;\n                // Replace all spaces with 5 spaces\n\n                let lineToAppend = line.replace(/\\(\\)\\./gm, `()\\n${spaces}.`);\n                newString += \"\\n\" + lineToAppend;\n            }\n        }\n\n        return newString;\n    }\n\n    setFunction(func: Function) {\n        this.func = func;\n    }\n\n    setFunctionThroughFormattedString(s: string) {\n        this.func = new Function(s);\n    }\n\n    toFunction(): Function {\n        return this.func;\n    }\n\n    run() {\n        this.func();\n    }\n}\n", "import {StaticDemo} from \"./StaticDemo\";\n\n/**\n * Decorator for demo functions\n * adds the function to the StaticDemo instance\n */\nexport function demoFunction(...descriptionLines: string[]) {\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        let demo = StaticDemo.i;\n        let currFunction = target[propertyKey];\n\n        if (descriptionLines.length === 0) {\n            descriptionLines.push(\"[No description]\");\n        }\n\n        let description = \"Description:\\n\" + descriptionLines.join(\"\\n\");\n\n        // Add space before capital letters\n        let name = propertyKey.replace(/([A-Z])/g, ' $1').trim();\n        // name += \"  \";\n        // Capitalize first letter\n        name = name.charAt(0).toUpperCase() + name.slice(1);\n        // name = `[ ${name} ]`;\n\n        demo.addDemoFunction(name, currFunction, description);\n    };\n}\n", "import PointerHandlerParentElement from \"../Basic/PointerHanderParentElement\";\nimport {Point2D} from \"../../Utils/Math/Point\";\n\nexport abstract class LayoutElement extends PointerHandlerParentElement {\n    getMaxElementWidth(): number {\n        let maxWidth = 0;\n        for (let child of this.children) {\n            if (child.absWidth > maxWidth) {\n                maxWidth = child.absWidth;\n            }\n        }\n        return maxWidth;\n    }\n    getCumulativeWidth(): number {\n        let width = 0;\n        for (let child of this.children) {\n            width += child.absWidth;\n        }\n        return width;\n    }\n    getMaxElementHeight(): number {\n        let maxHeight = 0;\n        for (let child of this.children) {\n            if (child.absHeight > maxHeight) {\n                maxHeight = child.absHeight;\n            }\n        }\n        return maxHeight;\n    }\n    getCumulativeHeight(): number {\n        let height = 0;\n        for (let child of this.children) {\n            height += child.absHeight;\n        }\n        return height;\n    }\n    pointerInRange(point: Point2D): boolean {\n        // console.log(`Pointer in range of ${this}`);\n        return true;\n    }\n}\n", "import {LayoutElement} from \"./LayoutElement\";\nimport {Point2D} from \"../../Utils/Math/Point\";\n\nexport class VerticalLayout extends LayoutElement {\n    updateChildrenPosition() {\n        let maxChildWidth = 0;\n        super.updateChildrenPosition();\n        let x = 0;\n        let y = 0;\n        for (let child of this.children) {\n            child.position = new Point2D(x, y);\n            if (child instanceof LayoutElement) {\n                child.height = child.getCumulativeHeight();\n                child.width = child.getCumulativeWidth();\n            }\n            if (child.width > maxChildWidth) {\n                maxChildWidth = child.width;\n            }\n            y += child.height;\n        }\n        this.absWidth = maxChildWidth;\n        this.absHeight = y;\n    }\n\n    getCumulativeWidth(): number {\n        return this.getMaxElementWidth();\n    }\n}\n", "import {Colors} from \"../Constants/Colors\";\n\nexport default class BasicTheme{\n    fillStyle: string = Colors.white;\n    strokeStyle: string = Colors.blue700;\n    lineWidth: number = 2;\n\n    setFillStyle(fillStyle: string) {\n        this.fillStyle = fillStyle;\n        return this;\n    }\n    setStrokeStyle(strokeStyle: string) {\n        this.strokeStyle = strokeStyle;\n        return this;\n    }\n    setLineWidth(width: number) {\n        this.lineWidth = width;\n        return this;\n    }\n    static get default(): BasicTheme{\n        return new BasicTheme();\n    }\n    static get transparent(): BasicTheme{\n        return new BasicTheme().setLineWidth(0).setFillStyle(Colors.transparent).setStrokeStyle(Colors.transparent);\n    }\n    static get hover(): BasicTheme{\n        return new BasicTheme().setFillStyle(Colors.grey100);\n    }\n    static get pressed(): BasicTheme{\n        return new BasicTheme().setFillStyle(Colors.grey200);\n    }\n}\n", "export default class ThemeKeys{\n    static readonly ON_HOVER_THEME = \"ON_HOVER_THEME\";\n    static readonly ON_DOWN_THEME = \"ON_DOWN_THEME\";\n    static readonly DEFAULT_THEME = \"DEFAULT_THEME\";\n}\n", "import {CubismCanvasDrawer} from \"../../Drawer/CubismCanvasDrawer\";\nimport {PointerPoint} from \"../../Datatypes/PointerPoint\";\n\nimport PointerHandlerParentElement from \"./PointerHanderParentElement\";\nimport BasicTheme from \"../../Theme/BasicTheme\";\nimport {needsRedrawAccessor} from \"../../Utils/Decorators/NeedsRedraw\";\nimport ThemeKeys from \"../../Constants/ThemeKeys\";\n\nexport class ThemedElement extends PointerHandlerParentElement {\n    _themes: { [key: string]: BasicTheme } | undefined;\n    _currTheme: BasicTheme | undefined;\n\n    get themes(): { [key: string]: BasicTheme } {\n        if (this._themes === undefined) {\n            this._themes = {};\n        }\n        return this._themes;\n    }\n\n    setTheme(name: string, theme: BasicTheme): ThemedElement {\n        this.themes[name] = theme;\n        return this;\n    }\n\n    onCreate() {\n        super.onCreate();\n        this.setTheme(ThemeKeys.DEFAULT_THEME, BasicTheme.default);\n        this.currTheme = this.themes[ThemeKeys.DEFAULT_THEME];\n    }\n\n    get currTheme(): BasicTheme {\n        if (this._currTheme === undefined) {\n            this._currTheme = new BasicTheme();\n        }\n        return this._currTheme;\n    }\n\n    @needsRedrawAccessor()\n    set currTheme(theme: BasicTheme) {\n        // console.log(\"Setting theme to: \", theme);\n        this._currTheme = theme;\n    }\n\n    updateCanvasDrawerTheme(): void {\n        if (this.currTheme) {\n            this.c.setFillStyle(this.currTheme.fillStyle);\n            this.c.setStrokeStyle(this.currTheme.strokeStyle);\n            this.c.setStrokeWidth(this.currTheme.lineWidth);\n        } else {\n            console.log(\"No theme set for element\");\n        }\n    }\n\n    draw(): void {\n        super.draw();\n        this.updateCanvasDrawerTheme();\n    }\n}\n", "import {ThemedElement} from \"./ThemedElement\";\nimport BasicTheme from \"../../Theme/BasicTheme\";\nimport {PointerPoint} from \"../../Datatypes/PointerPoint\";\nimport ThemeKeys from \"../../Constants/ThemeKeys\";\nimport {Colors} from \"../../Constants/Colors\";\n\nexport class PointerInteractThemeElement extends ThemedElement {\n\n    onCreate() {\n        super.onCreate();\n        this.setTheme(ThemeKeys.ON_DOWN_THEME, BasicTheme.pressed);\n        this.setTheme(ThemeKeys.ON_HOVER_THEME, BasicTheme.hover);\n    }\n    onDown(point: PointerPoint) {\n        super.onDown(point);\n        this.currTheme = this.themes[ThemeKeys.ON_DOWN_THEME];\n    }\n    onUp(point: PointerPoint) {\n        super.onUp(point);\n        this.currTheme = this.themes[ThemeKeys.ON_HOVER_THEME];\n    }\n    onEnter(point: PointerPoint) {\n        super.onEnter(point);\n        this.currTheme = this.themes[ThemeKeys.ON_HOVER_THEME];\n    }\n    onLeave(point: PointerPoint) {\n        super.onLeave(point);\n        this.currTheme = this.themes[ThemeKeys.DEFAULT_THEME];\n    }\n}\n", "import {PointerInteractThemeElement} from \"./Basic/PointerInteractThemeElement\";\n\nexport class RectElement extends PointerInteractThemeElement {\n    draw() {\n        super.draw();\n        let c = this.c;\n        c.offset(this.position);\n        c.drawRectWithPoints(this.absSize);\n        c.restoreTranslate();\n    }\n}\n", "import {PointerInteractThemeElement} from \"./Basic/PointerInteractThemeElement\";\nimport {Point2D} from \"../Utils/Math/Point\";\n\nexport class CircleElement extends PointerInteractThemeElement {\n    draw(): void {\n        super.draw();\n        let c = this.c;\n        // let center = this.centerPoint;\n        c.offset(this.position);\n        c.drawCircle(this.width/2, this.height/2, this.size.min / 2);\n        // console.log(\"Drawing circle at: \", center);\n        c.restoreTranslate();\n    }\n    pointerInRange(point: Point2D): boolean {\n        let radius = this.size.min / 2;\n        let dist = this.centerPoint.euclideanDistance(point);\n        return dist <= radius;\n    }\n}\n", "import {LayoutElement} from \"./LayoutElement\";\nimport {Point2D} from \"../../Utils/Math/Point\";\n\nexport class HorizontalLayout extends LayoutElement {\n    updateChildrenPosition() {\n        let maxChildHeight = 0;\n        super.updateChildrenPosition();\n        let x = 0;\n        let y = 0;\n        for (let child of this.children) {\n            child.position = new Point2D(x, y);\n            if (child instanceof LayoutElement) {\n                child.height = child.getCumulativeHeight();\n                child.width = child.getCumulativeWidth();\n            }\n            if (child.height > maxChildHeight) {\n                maxChildHeight = child.height;\n            }\n            x += child.width;\n        }\n        this.absHeight = maxChildHeight;\n        this.absWidth = x;\n    }\n    getCumulativeHeight(): number {\n        return  this.getMaxElementHeight();\n    }\n}\n", "import {CubismElement} from \"./Basic/CubismElement\";\nimport {Colors} from \"../Constants/Colors\";\n\nexport class Background extends CubismElement{\n    color: string = Colors.white;\n    setColor(color: string) {\n        this.color = color;\n        return this;\n    }\n    draw() {\n        super.draw();\n        this.c.setFillStyle(this.color);\n        this.c.drawRect(0, 0, this.cubism.width, this.cubism.height);\n    }\n}", "import BasicTheme from \"./BasicTheme\";\nimport {Colors} from \"../Constants/Colors\";\n\nexport class FontTheme extends BasicTheme{\n    fontSize: number = 20;\n    fontFamily: string = \"Arial\";\n\n    setFontSize(size: number) {\n        this.fontSize = size;\n        return this;\n    }\n\n    setFontFamily(fontFamily: string) {\n        this.fontFamily = fontFamily;\n        return this;\n    }\n\n    static get default(): FontTheme{\n        return new FontTheme().setFillStyle(Colors.black);\n    }\n}", "import {CubismElement} from \"./Basic/CubismElement\";\nimport {FontTheme} from \"../Theme/FontTheme\";\n\nexport class TextElement extends CubismElement {\n    theme: FontTheme = FontTheme.default;\n    content: string = \"NO CONTENT\";\n\n    setFontSize(size: number) {\n        this.theme.fontSize = size;\n    }\n\n    constructor(content: string, id: string | null = null) {\n        super(id);\n        this.content = content;\n    }\n\n    get height(): number {\n        return this.theme.fontSize;\n    }\n\n    draw() {\n        super.draw();\n        let c = this.c;\n        c.setFont(`${this.theme.fontSize}px ${this.theme.fontFamily}`);\n        c.offset(this.position);\n        c.setFillStyle(this.theme.fillStyle);\n        c.setStrokeStyle(this.theme.strokeStyle);\n\n        let textWidth = c.measureText(this.content).width;\n        let textHeight = this.theme.fontSize;\n        c.fillText(this.content, 0, textHeight);\n        c.restoreTranslate();\n    }\n}\n", "import {PointerInteractThemeElement} from \"./Basic/PointerInteractThemeElement\";\nimport BasicIcon from \"./Icons/BasicIcon\";\nimport {VerticalLayout} from \"./Layouts/VerticalLayout\";\nimport {TextElement} from \"./TextElement\";\nimport {Point2D} from \"../Utils/Math/Point\";\nimport {PointerPoint} from \"../Datatypes/PointerPoint\";\n\nexport class ButtonElement extends PointerInteractThemeElement {\n    _icon: BasicIcon | null = null;\n    _text: TextElement | null = null;\n\n    _onClick: (point:PointerPoint) => void = () => {};\n\n    iconXOffset = 10;\n    textXOffset = 10;\n\n    set icon(icon: BasicIcon | null) {\n        this._icon = icon;\n        if (icon !== null) {\n            icon.position.x = this.iconXOffset;\n            icon.position.y = this.size.y / 2 - icon.height / 2;\n            this.addChildren(icon);\n        }\n    }\n\n    get icon(): BasicIcon | null {\n        return this._icon;\n    }\n\n    get text(): TextElement | null {\n        return this._text;\n    }\n\n    set text(text: TextElement | null) {\n        this._text = text;\n        if (text !== null) {\n            text.position.x = this.textXOffset;\n            text.position.y = this.size.y / 2 - text.height / 2 -2;\n            if (this.icon !== null) {\n                text.position.x += this.icon.width + this.iconXOffset;\n            }\n            this.addChildren(text);\n        }\n    }\n\n    setOnClick(func:(point:Point2D)=>void) {\n        this._onClick = func;\n        return this;\n    }\n\n    onUp(point: PointerPoint): void {\n        super.onUp(point);\n        this._onClick(point);\n    }\n\n    draw() {\n        this.updateCanvasDrawerTheme();\n        this.c.offset(this.position);\n        this.c.drawRectWithPoints(this.size);\n        if (this.icon !== null) {\n\n            this.icon.draw();\n        }\n        if (this.text !== null) {\n            this.text.draw();\n        }\n        this.c.restoreTranslate();\n    }\n\n    setIcon(icon: BasicIcon) {\n        this.icon = icon;\n        return this;\n    }\n\n    setText(text: string | TextElement) {\n        if (typeof text === \"string\") {\n            text = new TextElement(text);\n        }\n        this.text = text;\n        return this;\n    }\n}\n", "import {CubismElement} from \"../Basic/CubismElement\";\nimport {Point2D} from \"../../Utils/Math/Point\";\n\nexport default class BasicIcon extends CubismElement {\n    _size: Point2D = new Point2D(20, 20);\n\n    draw() {\n        super.draw();\n        this.c.offset(this.position);\n        this.drawIcon();\n        this.c.restoreTranslate();\n    }\n\n    drawIcon() {\n        throw new Error(\"Not implemented\");\n    }\n}\n", "import BasicIcon from \"./BasicIcon\";\n\nexport class CloseIcon extends BasicIcon {\n    drawIcon() {\n        let size = this.size.min\n        this.c.ctx.beginPath();\n        this.c.ctx.moveTo(0, 0);\n        this.c.ctx.lineTo(size, size);\n        this.c.ctx.moveTo(size, 0);\n        this.c.ctx.lineTo(0, size);\n        this.c.ctx.stroke();\n    }\n}", "import BasicIcon from \"./BasicIcon\";\n\nexport class AddIcon extends BasicIcon{\n    drawIcon() {\n        let size = this.size.min;\n        this.c.ctx.beginPath();\n        this.c.ctx.moveTo(0, size/2);\n        this.c.ctx.lineTo(size, size/2);\n        this.c.ctx.moveTo(size/2, 0);\n        this.c.ctx.lineTo(size/2, size);\n        this.c.ctx.stroke();\n    }\n}", "import {WebSvgIcon} from \"./SVGIcon\";\nimport BasicIcon from \"./BasicIcon\";\nimport BasicTheme from \"../../Theme/BasicTheme\";\nimport {Colors} from \"../../Constants/Colors\";\n\nexport class MaterialIcons extends BasicIcon {\n    svgImg: HTMLImageElement;\n\n    theme: BasicTheme = new BasicTheme().setFillStyle(Colors.blue700).setStrokeStyle(Colors.blue200);\n\n    constructor(iconName: string) {\n        super();\n\n        this.svgImg = new Image()\n        let iconUrl = \"https://fonts.gstatic.com/s/i/materialicons/\" + iconName + \"/v8/20px.svg\"\n\n        let xmlHttp = new XMLHttpRequest();\n        xmlHttp.open(\"GET\", iconUrl, false); // false for synchronous request\n        xmlHttp.send(null);\n        let rawSvg = xmlHttp.responseText;\n        this.svgImg.src = \"data:image/svg+xml;base64,\" + btoa(rawSvg);\n    }\n\n    draw() {\n        this.c.offset(this.position);\n        this.c.setFillStyle(this.theme.fillStyle);\n        this.c.drawImage(this.svgImg, 0, 0, this.width, this.height);\n        this.c.restoreTranslate();\n    }\n\n    static get add() {\n        return new MaterialIcons(\"add\");\n    }\n\n    static get close() {\n        return new MaterialIcons(\"close\");\n    }\n\n    static get done() {\n        return new MaterialIcons(\"done\");\n    }\n\n    static get edit() {\n        return new MaterialIcons(\"edit\");\n    }\n\n    static get menu() {\n        return new MaterialIcons(\"menu\");\n    }\n\n    static get more_vert() {\n        return new MaterialIcons(\"more_vert\");\n    }\n\n    static get search() {\n        return new MaterialIcons(\"search\");\n    }\n\n    static get remove() {\n        return new MaterialIcons(\"remove\");\n    }\n\n    static get settings() {\n        return new MaterialIcons(\"settings\");\n    }\n\n    static get arrow_back() {\n        return new MaterialIcons(\"arrow_back\");\n    }\n\n    static get arrow_forward() {\n        return new MaterialIcons(\"arrow_forward\");\n    }\n    static get undo() {\n        return new MaterialIcons(\"undo\");\n    }\n    static get redo() {\n        return new MaterialIcons(\"redo\");\n    }\n    static get save() {\n        return new MaterialIcons(\"save\");\n    }\n    static get delete() {\n        return new MaterialIcons(\"delete\");\n    }\n    static get add_circle() {\n        return new MaterialIcons(\"add_circle\");\n    }\n    static get remove_circle() {\n        return new MaterialIcons(\"remove_circle\");\n    }\n    static get pencil() {\n        return MaterialIcons.edit;\n    }\n    static get clear() {\n        return new MaterialIcons(\"clear\");\n    }\n    static get check() {\n        return new MaterialIcons(\"check\");\n    }\n    static get check_circle() {\n        return new MaterialIcons(\"check_circle\");\n    }\n    static get cancel() {\n        return new MaterialIcons(\"cancel\");\n    }\n    static get move() {\n        return MaterialIcons.open_with;\n    }\n    static get open_with() {\n        return new MaterialIcons(\"open_with\");\n    }\n    static get zoom_in() {\n        return new MaterialIcons(\"zoom_in\");\n    }\n    static get zoom_out() {\n        return new MaterialIcons(\"zoom_out\");\n    }\n    static get play_arrow() {\n        return new MaterialIcons(\"play_arrow\");\n    }\n}\n", "import {CircleElement} from \"./CircleElement\";\nimport {Point2D} from \"../Utils/Math/Point\";\nimport {PointerPoint} from \"../Datatypes/PointerPoint\";\n\nexport class DraggableCircle extends CircleElement implements IPoint2D {\n    _isDragging: boolean = false;\n    _dragStartPoint: Point2D | null = null;\n    _dragStartPos: Point2D | null = null;\n\n    get x(): number {\n        return this.centerPoint.x;\n    }\n    // set x(x: number) {\n    //     this.setPosFromXY(x, this.y);\n    // }\n    get y(): number {\n        return this.centerPoint.y;\n    }\n    // set y(y: number) {\n    //     this.setPosFromXY(this.x, y);\n    // }\n\n    onCreate() {\n        super.onCreate();\n        this.setSizeFromXY(20, 20);\n    }\n\n\n    get isDragging(): boolean {\n        return this._isDragging;\n    }\n\n    onDown(point: PointerPoint): void {\n        super.onDown(point);\n        this._isDragging = true;\n        this._dragStartPoint = point;\n        this._dragStartPos = this.position;\n    }\n\n    onUp(point: PointerPoint): void {\n        super.onUp(point);\n        this._isDragging = false;\n        this._dragStartPoint = null;\n        this._dragStartPos = null;\n    }\n\n    onMove(point: PointerPoint): void {\n        super.onMove(point);\n\n    }\n\n    onParentMove(point: PointerPoint) {\n        super.onParentMove(point);\n        if (this._isDragging) {\n            if (this._dragStartPoint !== null && this._dragStartPos !== null) {\n                let diff = point.sub(this._dragStartPoint);\n                this.position = this._dragStartPos.add(diff);\n            }\n        }\n    }\n}\n", "export class IJMatrix {\n    arr: number[][];\n\n    constructor(rows: number, cols: number) {\n        this.arr = [];\n        for (let i = 0; i < rows; i++) {\n            this.arr.push([]);\n            for (let j = 0; j < cols; j++) {\n                this.arr[i].push(0);\n            }\n        }\n    }\n\n    setIJ(i: number, j: number, value: number) {\n        this.arr[i][j] = value;\n        return this;\n    }\n\n    getIJ(i: number, j: number):number {\n        return this.arr[i][j];\n\n    }\n\n    set(arr: number[]) {\n        let i = 0;\n        for (let row of this.arr) {\n            for (let j = 0; j < row.length; j++) {\n                row[j] = arr[i];\n                i++;\n            }\n        }\n        return this;\n    }\n    setFrom2DArray(arr: number[][]) {\n        this.arr = arr;\n        return this;\n    }\n\n    multiply(other: IJMatrix) {\n        let result = new IJMatrix(this.arr.length, other.arr[0].length);\n        for (let i = 0; i < this.arr.length; i++) {\n            for (let j = 0; j < other.arr[0].length; j++) {\n                for (let k = 0; k < this.arr[0].length; k++) {\n                    result.arr[i][j] += this.arr[i][k] * other.arr[k][j];\n                }\n            }\n        }\n        return result;\n    }\n}\n", "import {IJMatrix} from \"../../Utils/Math/NNMatrix\";\n\nexport function cubic(cubicFunctionBasis: (n: number) => IJMatrix, pointMatrix: IJMatrix, t: number) {\n    let b = cubicFunctionBasis(t);\n    let result = new IJMatrix(1, 2);\n    for (let i = 0; i < 4; i++) {\n        result.setIJ(0, 0, result.getIJ(0, 0) + pointMatrix.getIJ(i, 0) * b.getIJ(0, i));\n        result.setIJ(0, 1, result.getIJ(0, 1) + pointMatrix.getIJ(i, 1) * b.getIJ(0, i));\n    }\n    return result;\n}\n\nexport function hermite(t: number) {\n    return new IJMatrix(1, 4)\n        .set([2 * t * t * t - 3 * t * t + 1,\n            t * t * t - 2 * t * t + t,\n            -2 * t * t * t + 3 * t * t,\n            t * t * t - t * t]\n        );\n}\n\nexport function bezier(t: number) {\n    return new IJMatrix(1, 4)\n        .set([Math.pow(1 - t, 3),\n            3 * t * Math.pow(1 - t, 2),\n            3 * Math.pow(t, 2) * (1 - t),\n            Math.pow(t, 3)]\n        );\n}\n\nexport function bSpline(t: number) {\n    return new IJMatrix(1, 4)\n        .set([Math.pow(1 - t, 3) / 6,\n            (3 * t * t * t - 6 * t * t + 4) / 6,\n            (-3 * t * t * t + 3 * t * t + 3 * t + 1) / 6,\n            t * t * t / 6]\n        );\n}\n\n\nexport function dHermite(t: number) {\n    return new IJMatrix(1, 4)\n        .set(\n            [\n                6 * t ** 2 - 6 * t,\n                3 * t ** 2 - 4 * t + 1,\n                -6 * t ** 2 + 6 * t,\n                3 * t ** 2 - 2 * t\n            ]\n        );\n}\n", "import {PointerInteractThemeElement} from \"./Basic/PointerInteractThemeElement\";\nimport {CubismElement} from \"./Basic/CubismElement\";\nimport {Point2D} from \"../Utils/Math/Point\";\nimport {cubic, dHermite, hermite} from \"../Curve/Curve2D/Cubic\";\nimport {IJMatrix} from \"../Utils/Math/NNMatrix\";\nimport PointerHandlerParentElement from \"./Basic/PointerHanderParentElement\";\nimport {DraggableCircle} from \"./DraggableCircle\";\n\nexport class CurveElement extends CubismElement {\n    _points: IPoint2D[];\n\n    constructor(id: string | null = null, points: IPoint2D[] = []) {\n        super(id);\n        this._points = points;\n    }\n\n    get points() {\n        return this._points;\n    }\n\n\n    onCreate() {\n        super.onCreate();\n        this.width = 500;\n        this.height = 500;\n    }\n\n\n    draw() {\n        super.draw();\n\n        // let d0 = Point2D.getRandom(400);\n        // let d1 = Point2D.getRandom(400);\n\n        for (let p of this.points) {\n            this.c.drawPoint(p);\n        }\n\n        let step = 0.1;\n\n\n        let lastD = Point2D.zero;\n\n        for (let i = 0; i < this.points.length - 1; i++) {\n            let p0 = Point2D.fromIPoint(this.points[i]);\n            let p1 = Point2D.fromIPoint(this.points[i + 1]);\n            let t = 0;\n            let lastPoint: IPoint2D = p0;\n\n            let d0 = lastD;\n            let d1 = null;\n            if (i < this.points.length - 2) {\n                let p2 = Point2D.fromIPoint(this.points[i + 2]);\n                d1 = p2.sub(p0).scale(0.5);\n            } else {\n                d1 = p1.sub(p0).scale(0.5);\n            }\n\n            if (i > 0) {\n                let tangent = this.getTangent(t, p0, p1, d0, d1);\n                // console.log(`tangent [${i}]: ${tangent.x}, ${tangent.y}`);\n                let rotation = - Math.atan2(tangent.y, tangent.x);\n                this.c.offsetXY(100, 100);\n                // this.c.drawPoint(tangent);\n                this.c.restoreTranslate();\n                this.c.drawArrow(Point2D.fromIPoint(this.points[i]), rotation, 30);\n            }\n\n            while (t < 1) {\n                let point = this.getPoint(t, p0, p1, d0, d1);\n                // this.c.drawPoint(point, 3);\n                this.c.drawLineWithPoints(lastPoint, point);\n                lastPoint = point;\n                t += step;\n            }\n            lastD = d1;\n        }\n    }\n\n    getTangent(t: number, p0: IPoint2D, p1: IPoint2D, d0: IPoint2D, d1: IPoint2D): Point2D {\n        let pointMatrix = new IJMatrix(4, 2)\n            .set([\n                p0.x, p0.y,\n                d0.x, d0.y,\n                p1.x, p1.y,\n                d1.x, d1.y\n            ]);\n        let out = cubic(dHermite, pointMatrix, t);\n        return new Point2D(out.getIJ(0, 0), out.getIJ(0, 1));\n    }\n\n    getPoint(t: number, p0: IPoint2D, p1: IPoint2D, d0: IPoint2D, d1: IPoint2D): IPoint2D {\n        let pointMatrix = new IJMatrix(4, 2)\n            .set([\n                p0.x, p0.y,\n                d0.x, d0.y,\n                p1.x, p1.y,\n                d1.x, d1.y\n            ]);\n        let out = cubic(hermite, pointMatrix, t);\n        return new Point2D(out.getIJ(0, 0), out.getIJ(0, 1));\n    }\n}\n", "import IAnimation from \"./IAnimation\";\nimport {CubismElement} from \"../Elements/Basic/CubismElement\";\nimport {EventKeys} from \"../Constants/EventKeys\";\nimport {Point2D} from \"../Utils/Math/Point\";\nimport CubismPart from \"../CubismPart\";\nimport {Cubism} from \"../Cubism\";\n\nexport class CubismAnimation extends CubismPart implements IAnimation {\n    _isPlaying: boolean = false;\n    _endFrame: number;\n    _currFrame: number = 0;\n\n    _animationCallBacks: ((frame: number) => void)[] = [];\n\n    constructor(cubism:Cubism, endFrame: number = 0) {\n        super();\n        this.setCubism(cubism);\n        this._endFrame = endFrame;\n    }\n\n    setPlaying(playing: boolean): this {\n        this._isPlaying = playing;\n        if (playing) {\n            this.cubism.initializer.initializeAlwaysRedraw();\n            this.cubism.eventSystem.registerEvent(EventKeys.FRAME_UPDATE, this.play.bind(this));\n        }\n        return this;\n    }\n\n    setAnimationEvent(callback: (frame: number) => void) {\n        this._animationCallBacks.push(callback);\n    }\n\n    onAnimationUpdate() {\n        for (const callback of this._animationCallBacks) {\n            callback(this._currFrame);\n        }\n    }\n\n    play(): void {\n        // console.log(\"Playing animation\");\n        // console.log(`Current frame: ${this._currFrame}`);\n        this.onAnimationUpdate();\n        this._currFrame++;\n\n        if (this._currFrame > this._endFrame) {\n            this._isPlaying = false;\n            this._currFrame = 0;\n\n            this.cubism.initializer.stopAlwaysRedraw();\n        }\n    }\n}\n", "import PointerHandlerParentElement from \"../Basic/PointerHanderParentElement\";\nimport {PointerPoint} from \"../../Datatypes/PointerPoint\";\nimport {Point2D} from \"../../Utils/Math/Point\";\nimport {IJMatrix} from \"../../Utils/Math/NNMatrix\";\nimport {cubic, dHermite, hermite} from \"../../Curve/Curve2D/Cubic\";\nimport {Colors} from \"../../Constants/Colors\";\nimport {CubismAnimation} from \"../../Animation/Animation\";\nimport {random} from \"../../Utils/Math/Math\";\n\nexport class CurveCanvas extends PointerHandlerParentElement {\n    _curves: IPoint2D[][] = [];\n    _drawing: boolean = false;\n\n    _isPlayingAnimation: boolean = false;\n    animationLength: number = 50;\n\n    circleSize = 20;\n\n    mode = {\n        draw: 0,\n        move: 1\n    }\n\n    _currMode: number = this.mode.draw;\n\n    set currMode(mode: number) {\n        console.log(\"Setting mode to: \", mode);\n\n        this._currMode = mode;\n    }\n\n    get currMode() {\n        return this._currMode;\n    }\n\n    set drawing(drawing: boolean) {\n        this._drawing = drawing;\n    }\n\n    changeToMoveMode() {\n        this.currMode = this.mode.move;\n    }\n\n    changeToDrawMode() {\n        this.currMode = this.mode.draw;\n    }\n\n    get drawing(): boolean {\n        return this._drawing;\n    }\n\n    onDown(point: PointerPoint) {\n        super.onDown(point);\n        this.drawing = true;\n        if (this._currMode === this.mode.draw) {\n            this._curves.push([point.sub(this.position)]);\n        }\n    }\n\n    onUp(point: PointerPoint) {\n        super.onUp(point);\n        if (this._currMode === this.mode.draw) {\n            this._curves[this._curves.length - 1].push(point.sub(this.position));\n            // Add another point to make sure the curve can be animated correctly\n            this._curves[this._curves.length - 1].push(point.sub(this.position));\n        }\n\n\n        this.drawing = false;\n    }\n\n    playAnimation() {\n        console.log(\"Playing animation\");\n        if (this._isPlayingAnimation) {\n            return;\n        }\n        if (this._curves.length === 0) {\n            return;\n        }\n        let animation = new CubismAnimation(this.cubism, this.animationLength);\n        this._isPlayingAnimation = true;\n        animation.setAnimationEvent(this.animationCallback.bind(this));\n        animation.setPlaying(true);\n        this.c.setRedraw(true);\n    }\n\n    animationCallback(t: number) {\n        // console.log(\"Animation callback: \", t);\n        if (t === this.animationLength) {\n            this._isPlayingAnimation = false;\n            return;\n        }\n        let ratio = t / this.animationLength;\n\n        if (this._curves.length === 0) {\n            console.log(\"No curves\");\n            return;\n        }\n        this.c.offset(this.position);\n        for (let i = 0; i < this._curves.length; i++) {\n            let curve = this._curves[i];\n\n\n            let currColor = `hsl(${(1 - i / (this._curves.length -1)) * 360}, ${35}%, ${70}%)`;\n            this.c.setStrokeStyle(currColor);\n            this.drawHermitCurve(curve, ratio);\n        }\n\n        this.c.restoreTranslate();\n    }\n\n    onMove(point: PointerPoint) {\n        super.onMove(point);\n        // console.log(\"Drawing: \", this.drawing);\n        let relaPoint = point.sub(this.position);\n        if (this.drawing) {\n            if (this._currMode === this.mode.draw) {\n                let lastCurve = this._curves[this._curves.length - 1];\n                let lastPoint = lastCurve[lastCurve.length - 1];\n                if (Point2D.fromIPoint(lastPoint).manhattanDistance(relaPoint) > 100) {\n                    lastCurve.push(relaPoint);\n                }\n            }\n            if (this._currMode === this.mode.move) {\n                let dragPoint = null;\n                for (let curve of this._curves) {\n                    for (let point of curve) {\n                        if (Point2D.fromIPoint(point).euclideanDistance(relaPoint) < this.circleSize) {\n                            dragPoint = point;\n                            break;\n                        }\n                    }\n                }\n\n                if (dragPoint !== null) {\n                    dragPoint.x = relaPoint.x;\n                    dragPoint.y = relaPoint.y;\n                }\n            }\n        }\n        this.c.setRedraw(true);\n    }\n\n    undo() {\n        if (this._curves.length > 0) {\n            this._curves.pop();\n            console.log(this._curves);\n            console.log(\"Undoing\");\n        }\n        this.c.setRedraw(true);\n    }\n\n    clear() {\n        while (this._curves.length > 0) {\n            this.undo();\n        }\n        this.c.setRedraw(true);\n    }\n\n    draw() {\n\n        // console.log(\"Drawing curves: \", this._curves);\n        super.draw();\n\n\n        this.c.offset(this.position);\n        // this.c.setFillStyle(\"black\");\n        this.c.setStrokeStyle(Colors.white);\n        this.c.setFillStyle(Colors.white);\n        this.c.drawRect(0, 0, this.size.x, this.size.y);\n        this.c.setStrokeStyle(Colors.black);\n        if (this._isPlayingAnimation) {\n            // console.log(\"Is playing\");\n            this.c.restoreTranslate();\n            return;\n        }\n        if (this.currMode === this.mode.move) {\n            this.c.setStrokeStyle(Colors.blue700);\n            this.c.setStrokeWidth(3);\n        }\n        if (this.currMode === this.mode.draw) {\n            this.c.setStrokeWidth(4);\n        }\n        for (let curve of this._curves) {\n            this.drawHermitCurve(curve);\n\n            if (this._currMode === this.mode.move) {\n                for (let point of curve) {\n                    this.c.drawPoint(point, this.circleSize);\n                }\n            }\n        }\n        this.c.restoreTranslate();\n    }\n\n    drawHermitCurve(points: IPoint2D[], ratio: number = 1) {\n        // let step = 0.1;\n        let lastD = Point2D.zero;\n        let fullEnd = points.length;\n        let end = Math.floor(fullEnd * ratio);\n\n        if (fullEnd < 1) {\n            return;\n        }\n\n        for (let i = 1; i < end; i++) {\n            let p0 = Point2D.fromIPoint(points[i - 1]);\n            let p1 = Point2D.fromIPoint(points[i]);\n            let t = 0;\n\n            let d0 = lastD;\n            let d1 = null;\n            if (i < end - 3) {\n                let p2 = Point2D.fromIPoint(points[i + 1]);\n                d1 = p2.sub(p0).scale(0.5);\n            } else {\n                d1 = p1.sub(p0).scale(0.5);\n            }\n            let segEnd = 1;\n            let isEdge = false;\n            if (this._isPlayingAnimation) {\n                if (i === end - 1) {\n                    isEdge = true;\n                    segEnd = (fullEnd * ratio - end);\n                }\n            }\n            let lastPoint: IPoint2D = p0;\n\n            // let step = Math.max(p0.manhattanDistance(p1) / 1000, 0.1);\n            // let step = 0.1;\n            // console.log(\"Step: \", step);\n            // console.log(\"Distance: \", p0.manhattanDistance(p1));\n            let step = 0.05;\n            while (t <= segEnd + step) {\n                let point = this.getPoint(t, p0, p1, d0, d1);\n\n                if (this._isPlayingAnimation) {\n                    this.c.setStrokeWidth(3);\n                }\n                this.c.drawLineWithPoints(lastPoint, point);\n                lastPoint = point;\n                t += step;\n            }\n            if (this._isPlayingAnimation) {\n                let point = this.getPoint(t, p0, p1, d0, d1);\n                if (isEdge) {\n                    let tangent = this.getTangent(t, p0, p1, d0, d1);\n                    // this.c.setStrokeWidth(20);\n                    let rotation = -Math.atan2(tangent.y, tangent.x);\n                    this.c.setStrokeWidth(2)\n                    this.c.setFillStyle(Colors.white);\n                    this.c.drawArrow(point, rotation, 20);\n                }\n            }\n            lastD = d1;\n        }\n    }\n\n\n    getTangent(t: number, p0: IPoint2D, p1: IPoint2D, d0: IPoint2D, d1: IPoint2D): Point2D {\n        let pointMatrix = new IJMatrix(4, 2)\n            .set([\n                p0.x, p0.y,\n                d0.x, d0.y,\n                p1.x, p1.y,\n                d1.x, d1.y\n            ]);\n        let out = cubic(dHermite, pointMatrix, t);\n        return new Point2D(out.getIJ(0, 0), out.getIJ(0, 1));\n    }\n\n    getPoint(t: number, p0: IPoint2D, p1: IPoint2D, d0: IPoint2D, d1: IPoint2D): Point2D {\n        let pointMatrix = new IJMatrix(4, 2)\n            .set([\n                p0.x, p0.y,\n                d0.x, d0.y,\n                p1.x, p1.y,\n                d1.x, d1.y\n            ]);\n        let out = cubic(hermite, pointMatrix, t);\n        return new Point2D(out.getIJ(0, 0), out.getIJ(0, 1));\n    }\n\n}\n", "import {Cubism} from \"../Cubism\";\nimport {initConsole} from \"../Utils/Debug/DebugConsole\";\nimport PointerHandlerParentElement from \"../Elements/Basic/PointerHanderParentElement\";\nimport RecursiveRect from \"../Elements/Fancy/RecursiveRect\";\nimport {ChangingRainbowBackground} from \"../Elements/Fancy/ChangingRainbowBackground\";\nimport {Point2D} from \"../Utils/Math/Point\";\nimport {demoFunction} from \"./DemoDecorators\";\nimport {EventKeys} from \"../Constants/EventKeys\";\nimport SizeKeys from \"../Constants/SizeKeys\";\nimport CanvasRecorder from \"./CanvasRecorder\";\nimport {PointerInteractThemeElement} from \"../Elements/Basic/PointerInteractThemeElement\";\nimport {VerticalLayout} from \"../Elements/Layouts/VerticalLayout\";\nimport {RectElement} from \"../Elements/RectElement\";\nimport {CircleElement} from \"../Elements/CircleElement\";\nimport {HorizontalLayout} from \"../Elements/Layouts/HorizontalLayout\";\nimport {Background} from \"../Elements/Background\";\nimport {Colors} from \"../Constants/Colors\";\nimport {ButtonElement} from \"../Elements/ButtonElement\";\nimport {CloseIcon} from \"../Elements/Icons/CloseIcon\";\nimport {AddIcon} from \"../Elements/Icons/AddIcon\";\nimport {OkIcon} from \"../Elements/Icons/OkIcon\";\nimport {ZoomInIcon} from \"../Elements/Icons/ZoomInIcon\";\nimport {UnknownIcon} from \"../Elements/Icons/UnknownIcon\";\nimport {CubismElement} from \"../Elements/Basic/CubismElement\";\nimport {WebSvgIcon} from \"../Elements/Icons/SVGIcon\";\nimport {MaterialIcons} from \"../Elements/Icons/MaterialIcons\";\nimport {DraggableCircle} from \"../Elements/DraggableCircle\";\nimport {CurveElement} from \"../Elements/CurveElement\";\nimport {CurveCanvas} from \"../Elements/Fancy/CurveCanvas\";\nimport {CubismAnimation} from \"../Animation/Animation\";\n\nconsole.log(\"loading DemoFunctions.ts ...\");\n\nclass DemoFunctions {\n    @demoFunction()\n    testFunction() {\n        console.log(\"demoFunction\");\n        console.log();\n    }\n\n    @demoFunction(\"This is a demo function\")\n    staticRecursiveRect() {\n        let app = Cubism.createFromId(\"mainCanvas\");\n        app.init(\n            new PointerHandlerParentElement(\n                null,\n                new ChangingRainbowBackground()\n                    .setSizeFromXY(SizeKeys\n                        .MATCH_PARENT, SizeKeys.MATCH_PARENT)\n                    .setLightness(70).setSaturation(80)\n                    .setChangingSpeed(0.1)\n                ,\n                new RecursiveRect()\n                    .setWiggleStrength(2)\n                    .setSizeFromXY(200, 200)\n                    .setPosFromXY(100, 100)\n                    .setRelativePosition(new Point2D(100, 100))\n                    .setRecursionCount(20)\n            )\n        )\n    }\n\n    @demoFunction(\n        \"This is an animated recursive rectangle.\",\n        \"Try to drag it around and see what happens.\"\n    )\n    animatedRecursiveRect() {\n        let app = Cubism.createFromId(\"mainCanvas\");\n\n        app.init(\n            new PointerHandlerParentElement(\n                null,\n                new ChangingRainbowBackground()\n                    .setSizeFromXY(SizeKeys.MATCH_PARENT, SizeKeys.MATCH_PARENT)\n                    .setLightness(70).setSaturation(80)\n                    .setChangingSpeed(0.1)\n                ,\n                new RecursiveRect()\n                    .setWiggleStrength(2)\n                    .setSizeFromXY(200, 200)\n                    .setPosFromXY(100, 100)\n                    .setRelativePosition(new Point2D(100, 100))\n                    .setRecursionCount(10)\n            ).setId(\"parent\")\n        )\n\n        app.eventSystem.registerEvent(EventKeys.FPS_UPDATE, (fps: number) => {\n            if (document.getElementById(\"fps\") === null) {\n                let fpsCounter = document.createElement(\"div\");\n                fpsCounter.id = \"fps\";\n                document.getElementById(\"controlDiv\")?.appendChild(fpsCounter);\n            }\n            document.getElementById(\"fps\")!.innerHTML = \"FPS: \" + fps;\n            //\n            // StaticDemo.i.controlDiv.appendChild(fpsCounter);\n            // fpsCounter.innerText = `FPS: ${fps}`;\n            // console.log(fps);\n        });\n        app.initializer.initializeAlwaysRedraw(); // Redraw every frame, by default it only redraws when the elements change\n        app.initializer.initializeFPSCounter(); // Show FPS\n    }\n\n\n    // @demoFunction(\"Demo function for events\")\n    eventDemo() {\n        let app = Cubism.createFromId(\"mainCanvas\");\n        app.init(\n            new PointerHandlerParentElement(\n                null,\n                new CircleElement()\n                    .setWidth(200).setHeight(200)\n                    .setPosFromXY(100, 100)\n            )\n        )\n        app.initializer.initializeFPSCounter();\n        app.eventSystem.registerEvent(EventKeys.FPS_UPDATE, (fps: number) => {\n            if (document.getElementById(\"fps\") === null) {\n                let fpsCounter = document.createElement(\"div\");\n                fpsCounter.id = \"fps\";\n                document.getElementById(\"controlDiv\")?.appendChild(fpsCounter);\n            }\n            document.getElementById(\"fps\")!.innerHTML = \"FPS: \" + fps;\n        });\n        app.initializer.initializeDrawsPerSecondCounter();\n        app.eventSystem.registerEvent(EventKeys.DRAW_COUNT_UPDATE, (draws: number) => {\n            // console.log(draws);\n            if (document.getElementById(\"draws\") === null) {\n                let drawsCounter = document.createElement(\"div\");\n                drawsCounter.id = \"draws\";\n                document.getElementById(\"controlDiv\")?.appendChild(drawsCounter);\n            }\n            document.getElementById(\"draws\")!.innerHTML = \"DFS(Draws per second): \" + draws;\n        });\n    }\n\n\n    @demoFunction(\"Demo function for theme changing\")\n    themedElements() {\n        let app = Cubism.createFromId(\"mainCanvas\");\n        app.init(\n            new PointerHandlerParentElement(\n                \"PointerHandlerParentElement\",\n                new Background().setColor(Colors.blue700),\n                new VerticalLayout(\"Outer Vertical Layout\",\n                    new RectElement()\n                        .setWidth(100).setHeight(50),\n                    new CircleElement()\n                        .setWidth(100).setHeight(100),\n                    new HorizontalLayout(\n                        \"Inner Horizontal Layout\",\n                        new RectElement()\n                            .setWidth(100).setHeight(100),\n                        new RectElement()\n                            .setWidth(100).setHeight(100),\n                        new CircleElement()\n                            .setWidth(100).setHeight(100),\n                    )\n                ).setPosFromXY(50, 75)\n            ).setPosFromXY(0, 0)\n        )\n    }\n\n    @demoFunction()\n    buttonAndLayoutDemo() {\n        let app = Cubism.createFromId(\"mainCanvas\");\n\n        let verticalLayout = new VerticalLayout(\"Add Button Vertical Layout\");\n\n        let itemList: CubismElement[] = [];\n        let horizontalLayout = new HorizontalLayout(\"Horizontal Layout\",\n            new ButtonElement(\"AddBtn\").setWidth(100).setHeight(50)\n                .setIcon(new AddIcon()).setText(\"Add\")\n                .setOnClick(() => {\n                    console.log(\"Add button clicked\");\n                    let item = new ButtonElement().setWidth(250).setHeight(50).setText(`Item ${itemList.length + 1}`);\n                    itemList.push(item);\n                    verticalLayout.addChildren(item);\n                }),\n            new ButtonElement(\"RemoveBtn\").setWidth(150).setHeight(50)\n                .setIcon(new CloseIcon()).setText(\"Remove\")\n\n                .setOnClick(() => {\n                        console.log(\"Remove button clicked\");\n                        if (itemList.length > 0) {\n                            verticalLayout.removeChild(itemList.pop() as CubismElement);\n                        }\n                    }\n                )\n        );\n        app.init(\n            new VerticalLayout(null,\n                horizontalLayout, verticalLayout\n            ).setPosFromXY(75, 25)\n        )\n    }\n\n    @demoFunction()\n    SvgTest() {\n        let app = Cubism.createFromId(\"mainCanvas\");\n        app.init(\n            new VerticalLayout(\n                \"SVG Test\",\n                new ButtonElement().setWidth(120).setHeight(50).setIcon(MaterialIcons.add).setText(\"Add\"),\n                new ButtonElement().setWidth(120).setHeight(50).setIcon(MaterialIcons.arrow_back).setText(\"arrow_back\"),\n                new ButtonElement().setWidth(120).setHeight(50).setIcon(MaterialIcons.edit).setText(\"Edit\"),\n                new ButtonElement().setWidth(120).setHeight(50).setIcon(MaterialIcons.search).setText(\"Search\"),\n            )\n        )\n    }\n\n    @demoFunction()\n    CurveDemo() {\n        let app = Cubism.createFromId(\"mainCanvas\");\n        app.width = 500;\n        app.height = 500;\n\n        let points: DraggableCircle[] = [];\n\n\n        let root = new PointerHandlerParentElement(\"Root\")\n\n        function addPoint() {\n            let point = new DraggableCircle()\n                .setPosFromPoint(Point2D.getRandom(100, 400));\n            points.push(point);\n            root.addChildren(point);\n        }\n\n        function removePoint() {\n            if (points.length > 0) {\n                root.removeChild(points.pop() as CubismElement);\n            }\n        }\n\n        root.addChildren(\n            new Background().setColor(Colors.white),\n            // new DraggableCircle().setSizeFromXY(10, 10).setPosFromXY(100, 100),ss\n            new CurveElement(null, points),\n            new ButtonElement().setWidth(150).setHeight(50).setIcon(MaterialIcons.add).setText(\"Add Point\").setPosFromXY(0, 450)\n                .setOnClick(() => {\n                    addPoint();\n                }),\n            new ButtonElement().setWidth(190).setHeight(50).setIcon(MaterialIcons.remove).setText(\"Remove Point\").setPosFromXY(150, 450)\n                .setOnClick(() => {\n                    removePoint();\n                })\n        )\n\n\n        for (let i = 0; i < 6; i++) {\n            addPoint();\n        }\n\n        app.init(root)\n    }\n\n    @demoFunction(\"Try to draw something with the mouse\", \"You can also try to change the drawing by changing to the moving mode.\", \"After drawing, you can click the play button to see the animation.\")\n    curveCanvas() {\n        let app = Cubism.createFromId(\"mainCanvas\");\n        let width = 500;\n        let height = 500;\n        app.width = width;\n        app.height = height;\n\n        let curveCanvas = new CurveCanvas().setWidth(width).setHeight(height).setPosFromXY(0, 50);\n\n\n        let modeBtn = new ButtonElement().setWidth(200).setHeight(50).setIcon(MaterialIcons.pencil).setText(\"Drawing Mode\").setPosFromXY(0, 0)\n            .setOnClick(() => {\n                console.log(`Current mode: ${curveCanvas._currMode}`);\n                if (curveCanvas._currMode === curveCanvas.mode.draw) {\n                    console.log(\"curveCanvas._currMode === curveCanvas.mode.draw\")\n                }\n                if (curveCanvas._currMode === curveCanvas.mode.move) {\n                    console.log(\"curveCanvas._currMode === curveCanvas.mode.move\")\n                }\n                if (curveCanvas._currMode === curveCanvas.mode.draw) {\n                    modeBtn.setIcon(MaterialIcons.move);\n                    modeBtn.setText(\"Move Mode\");\n                    curveCanvas.changeToMoveMode()\n                } else {\n                    console.log(\"Switching to drawing mode\");\n                    modeBtn.setIcon(MaterialIcons.pencil);\n                    modeBtn.setText(\"Drawing Mode\");\n                    curveCanvas.changeToDrawMode();\n                }\n            })\n\n        let undoBtn = new ButtonElement().setWidth(100).setHeight(50).setIcon(MaterialIcons.undo).setText(\"Undo\").setOnClick(() => {\n            console.log(\"Undo\");\n            curveCanvas.undo();\n        }).setPosFromXY(200, 0);\n        let playBtn = new ButtonElement().setWidth(100).setHeight(50).setIcon(MaterialIcons.play_arrow).setText(\"Play\").setOnClick(() => {\n            console.log(\"Play\");\n            curveCanvas.playAnimation();\n        }).setPosFromXY(300, 0);\n\n        let deleteBtn = new ButtonElement().setWidth(100).setHeight(50).setIcon(MaterialIcons.delete).setText(\"Clear\").setOnClick(() => {\n            console.log(\"Delete\");\n            curveCanvas.clear();\n        }).setPosFromXY(400, 0);\n\n        app.init(\n            new PointerHandlerParentElement(\n                \"SVG Test\",\n                new Background().setColor(Colors.blue100),\n                // new CubismAnimation(100).setPlaying(true),\n                curveCanvas,\n                undoBtn,\n                modeBtn,\n                playBtn,\n                deleteBtn\n            )\n        )\n    }\n}\n\nfunction main() {\n    initConsole();\n}\n\nmain();\n"],
  "mappings": "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",
  "names": ["point"]
}
